(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{302:function(_,v,t){"use strict";t.r(v);var a=t(0),i=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"概述、原则、分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述、原则、分类"}},[_._v("#")]),_._v(" 概述、原则、分类")]),_._v(" "),t("p",[_._v("参考资料："),t("a",{attrs:{href:"http://c.biancheng.net/design_pattern/",target:"_blank",rel:"noopener noreferrer"}},[_._v("http://c.biancheng.net/design_pattern/"),t("OutboundLink")],1)]),_._v(" "),t("p",[_._v("《head first设计模式》")]),_._v(" "),t("h3",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[_._v("#")]),_._v(" 概述")]),_._v(" "),t("p",[_._v("软件设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结。设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。狭义的设计模式指GoF的23种")]),_._v(" "),t("h3",{attrs:{id:"设计模式七大原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式七大原则"}},[_._v("#")]),_._v(" 设计模式七大原则")]),_._v(" "),t("ul",[t("li",[_._v("开放封闭原则：对扩展开放，对修改封闭")]),_._v(" "),t("li",[_._v("里氏替换原则：子类要保留父类的所有特性")]),_._v(" "),t("li",[_._v("依赖倒置原则：面向接口编程，而不是面向实现编程")]),_._v(" "),t("li",[_._v("单一职责原则：不要搞一个很大的类")]),_._v(" "),t("li",[_._v("接口隔离原则：不要搞一个很大的接口，拆分成小的接口类")]),_._v(" "),t("li",[_._v("迪米特原则（最小知识原则））：中介者模式、外观模式，如果两个实体无需直接通信，那么就不该直接通信，而应该交由第三方转发调用")]),_._v(" "),t("li",[_._v("组合复用原则：多用组合，少用继承")])]),_._v(" "),t("h3",{attrs:{id:"创建型设计模式（五种）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建型设计模式（五种）"}},[_._v("#")]),_._v(" 创建型设计模式（五种）")]),_._v(" "),t("ul",[t("li",[_._v("单例：只生产一个对象实例")]),_._v(" "),t("li",[_._v("原型：生产一模一样的对象实例（复制实例）")]),_._v(" "),t("li",[_._v("工厂方法：生产一种对象")]),_._v(" "),t("li",[_._v("抽象工厂：生产多种对象")]),_._v(" "),t("li",[_._v("建造者： 生产复杂对象")])]),_._v(" "),t("h3",{attrs:{id:"结构型设计模式（七种）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结构型设计模式（七种）"}},[_._v("#")]),_._v(" 结构型设计模式（七种）")]),_._v(" "),t("ul",[t("li",[_._v("代理：访问某个对象前，先经过代理处理")]),_._v(" "),t("li",[_._v("适配器：两个类接口不兼容，用第三者来适配")]),_._v(" "),t("li",[_._v("桥接：当类存在多个维度的变化时，用组合方式，将抽象与实现分离，使它们可以独立变化")]),_._v(" "),t("li",[_._v("装饰者：动态的增加类的功能")]),_._v(" "),t("li",[_._v("外观：为多个子系统提供一个统一的接口")]),_._v(" "),t("li",[_._v("享元：运用共享技术来有效地支持大量细粒度对象的复用")]),_._v(" "),t("li",[_._v("组合：将对象组合成树状层次结构，用来表示“部分-整体”的关系，使用户对单个对象和组合对象具有一致的访问性")])]),_._v(" "),t("h3",{attrs:{id:"行为型设计模式（十一种）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行为型设计模式（十一种）"}},[_._v("#")]),_._v(" 行为型设计模式（十一种）")]),_._v(" "),t("ul",[t("li",[_._v("模板方法：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中实现")]),_._v(" "),t("li",[_._v("策略：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户")]),_._v(" "),t("li",[_._v("命令：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开")]),_._v(" "),t("li",[_._v("责任链：为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链")]),_._v(" "),t("li",[_._v("状态：对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为")]),_._v(" "),t("li",[_._v("观察者：目标对象变化后，通知所有观察者对象，只有一个发布者")]),_._v(" "),t("li",[_._v("中介者：任意对像变化后通知其他对象，每个对象都是发布者，是星型结构")]),_._v(" "),t("li",[_._v("迭代器：提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示")]),_._v(" "),t("li",[_._v("访问者：组合内有多种元素，每种元素又有多个访问者")]),_._v(" "),t("li",[_._v("备忘录：不破坏对象的封装性，在该对象之外保存对象的内部状态，当需要时能将该对象恢复到原先保存的状态。该模式又叫快照模式")]),_._v(" "),t("li",[_._v("解释器：不常用")])])])}),[],!1,null,null,null);v.default=i.exports}}]);
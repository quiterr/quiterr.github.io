(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{290:function(t,a,s){t.exports=s.p+"assets/img/framing.e4cebead.png"},291:function(t,a,s){t.exports=s.p+"assets/img/framing-implement.cb68aac1.png"},303:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"netty源码学习-粘包-半包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#netty源码学习-粘包-半包"}},[t._v("#")]),t._v(" netty源码学习-粘包&半包")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#粘包-半包"}},[t._v("粘包&半包")])]),e("li",[e("a",{attrs:{href:"#从源码剖析解码逻辑"}},[t._v("从源码剖析解码逻辑")])])])]),e("p"),t._v(" "),e("p",[t._v("这篇文章是"),e("a",{attrs:{href:"https://time.geekbang.org/course/detail/237-151113",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP粘包/半包Netty全搞定"),e("OutboundLink")],1),t._v("和"),e("a",{attrs:{href:"https://time.geekbang.org/course/detail/237-151118",target:"_blank",rel:"noopener noreferrer"}},[t._v("源码剖析：Netty对处理粘包/半包的支持"),e("OutboundLink")],1),t._v("的学习笔记。")]),t._v(" "),e("h2",{attrs:{id:"粘包-半包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#粘包-半包"}},[t._v("#")]),t._v(" 粘包&半包")]),t._v(" "),e("p",[t._v("粘包产生的原因：")]),t._v(" "),e("ul",[e("li",[t._v("发送方发送的数据比较小，网卡缓冲区会积累到一定的大小才会真的发送。")]),t._v(" "),e("li",[t._v("接收方读取缓冲区的数据不够及时")])]),t._v(" "),e("p",[t._v("半包产生的原因：")]),t._v(" "),e("ul",[e("li",[t._v("发送方发送的数据比较大，超过网卡缓冲区的大小")]),t._v(" "),e("li",[t._v("发送的数据大于MTU的大小")])]),t._v(" "),e("p",[t._v("粘包的另外两种说法：")]),t._v(" "),e("ul",[e("li",[t._v("多个发送被一次接收-收发角度")]),t._v(" "),e("li",[t._v("多个发送共用了一个数据包-传输角度")])]),t._v(" "),e("p",[t._v("半包的另外两种说法：")]),t._v(" "),e("ul",[e("li",[t._v("一次发送被多次接收-收发角度")]),t._v(" "),e("li",[t._v("一次发送分成了多个数据包-传输角度")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("UDP没有粘包和半包问题")])]),t._v(" "),e("p",[t._v("解决粘包、半包的几种方式：\n"),e("img",{attrs:{src:s(290),alt:""}})]),t._v(" "),e("p",[t._v("netty的实现：\n"),e("img",{attrs:{src:s(291),alt:""}})]),t._v(" "),e("h2",{attrs:{id:"从源码剖析解码逻辑"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从源码剖析解码逻辑"}},[t._v("#")]),t._v(" 从源码剖析解码逻辑")]),t._v(" "),e("p",[t._v("上图中的三个Decoder都继承自ByteToMessageDecoder，后者又继承自ChannelInboundHandlerAdapter，核心逻辑在channelRead方法中。")]),t._v(" "),e("p",[t._v("进到channelRead，可以知道：收到数据后，先用数据积累器积累数据，之后调"),e("code",[t._v("callDecode")]),t._v("方法开始解码。")]),t._v(" "),e("p",[t._v("进到"),e("code",[t._v("callDecode")]),t._v("，可以发现主逻辑在"),e("code",[t._v("decodeRemovalReentryProtection();")]),t._v("中。")]),t._v(" "),e("p",[t._v("进到"),e("code",[t._v("decodeRemovalReentryProtection")]),t._v("，发现主逻辑在：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ChannelHandlerContext")]),t._v(" ctx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuf")]),t._v(" in"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("这是一个抽象方法，显然这是用模板方法模式来把处理逻辑交给子类，利用idea的功能，很容易找到实现，例如FixedLengthFrameDecoder的实现为：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SuppressWarnings")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UnusedParameters"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ChannelHandlerContext")]),t._v(" ctx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuf")]),t._v(" in"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("in"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("readableBytes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" frameLength"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" in"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("readRetainedSlice")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("frameLength"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("再来看看之前说的数据积累器，首先它的定义为：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cumulator")]),t._v(" cumulator "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MERGE_CUMULATOR"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("再者，从channelRead调用的地方跟进去:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cumulator")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuf")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cumulate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBufAllocator")]),t._v(" alloc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuf")]),t._v(" cumulation"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuf")]),t._v(" in"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("这个接口有两种实现，分别是MERGE_CUMULATOR、COMPOSITE_CUMULATOR，两个都在ByteToMessageDecoder中，其中前者是memory copy的实现，也是ByteToMessageDecoder默认的选择。")])])}),[],!1,null,null,null);a.default=n.exports}}]);
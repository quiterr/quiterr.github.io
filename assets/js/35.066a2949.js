(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{335:function(e,a,t){"use strict";t.r(a);var n=t(0),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"《elasticsearch权威指南》随笔"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#《elasticsearch权威指南》随笔"}},[e._v("#")]),e._v(" 《Elasticsearch权威指南》随笔")]),e._v(" "),t("p",[e._v("2019.1.20")]),e._v(" "),t("h2",{attrs:{id:"_1、基础入门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、基础入门"}},[e._v("#")]),e._v(" 1、基础入门")]),e._v(" "),t("h3",{attrs:{id:"_1-1-一个例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-一个例子"}},[e._v("#")]),e._v(" 1.1 一个例子")]),e._v(" "),t("p",[t("strong",[e._v("插入一些测试数据（自动创建Index）")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X PUT "172.16.20.64:39200/megacorp/employee/1" -H \'Content-Type: application/json\' -d\'\n{\n    "first_name" : "John",\n    "last_name" :  "Smith",\n    "age" :        25,\n    "about" :      "I love to go rock climbing",\n    "interests": [ "sports", "music" ]\n}\n\'\ncurl -X PUT "172.16.20.64:39200/megacorp/employee/2" -H \'Content-Type: application/json\' -d\'\n{\n    "first_name" :  "Jane",\n    "last_name" :   "Smith",\n    "age" :         32,\n    "about" :       "I like to collect rock albums",\n    "interests":  [ "music" ]\n}\n\'\ncurl -X PUT "172.16.20.64:39200/megacorp/employee/3" -H \'Content-Type: application/json\' -d\'\n{\n    "first_name" :  "Douglas",\n    "last_name" :   "Fir",\n    "age" :         35,\n    "about":        "I like to build cabinets",\n    "interests":  [ "forestry" ]\n}\n\'\n')])])]),t("p",[t("strong",[e._v("查询文档")])]),e._v(" "),t("p",[t("code",[e._v('curl -X GET "172.16.20.64:39200/megacorp/employee/1"')])]),e._v(" "),t("p",[t("strong",[e._v("简单的搜索")])]),e._v(" "),t("p",[e._v("搜全部")]),e._v(" "),t("p",[t("code",[e._v('curl -X GET "172.16.20.64:39200/megacorp/employee/_search"')])]),e._v(" "),t("p",[e._v("搜某个字段")]),e._v(" "),t("p",[t("code",[e._v('curl -X GET "172.16.20.64:39200/megacorp/employee/_search?q=last_name:Smith"')])]),e._v(" "),t("p",[t("strong",[e._v("表达式搜索")])]),e._v(" "),t("p",[e._v("用领域特定语言（DSL）来搜索")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "172.16.20.64:39200/megacorp/employee/_search" -H \'Content-Type: application/json\' -d\'\n{\n    "query" : {\n        "match" : {\n            "last_name" : "Smith"\n        }\n    }\n}\n\'\n')])])]),t("p",[t("strong",[e._v("更复杂的搜索")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "172.16.20.64:39200/megacorp/employee/_search" -H \'Content-Type: application/json\' -d\'\n{\n    "query" : {\n        "bool": {\n            "must": {\n                "match" : {\n                    "last_name" : "smith" \n                }\n            },\n            "filter": {\n                "range" : {\n                    "age" : { "gt" : 30 } \n                }\n            }\n        }\n    }\n}\n\'\n')])])]),t("p",[t("strong",[e._v("全文搜索")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "172.16.20.64:39200/megacorp/employee/_search" -H \'Content-Type: application/json\' -d\'\n{\n    "query" : {\n        "match" : {\n            "about" : "rock climbing"\n        }\n    }\n}\n\'\n')])])]),t("p",[t("strong",[e._v("短语搜索")])]),e._v(" "),t("p",[e._v("精确匹配一系列单词或者短语 。 比如， 我们想执行这样一个查询，仅匹配同时包含 “rock” 和 “climbing” ，并且 二者以短语 “rock climbing” 的形式紧挨着的雇员记录。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "172.16.20.64:39200/megacorp/employee/_search" -H \'Content-Type: application/json\' -d\'\n{\n    "query" : {\n        "match_phrase" : {\n            "about" : "rock climbing"\n        }\n    }\n}\n\'\n')])])]),t("p",[t("strong",[e._v("高亮搜索")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "172.16.20.64:39200/megacorp/employee/_search" -H \'Content-Type: application/json\' -d\'\n{\n    "query" : {\n        "match_phrase" : {\n            "about" : "rock climbing"\n        }\n    },\n    "highlight": {\n        "fields" : {\n            "about" : {}\n        }\n    }\n}\n\'\n')])])]),t("p",[t("strong",[e._v("分析")])]),e._v(" "),t("p",[e._v("挖掘出雇员中最受欢迎的兴趣爱好：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "172.16.20.64:39200/megacorp/employee/_search" -H \'Content-Type: application/json\' -d\'\n{\n  "aggs": {\n    "all_interests": {\n      "terms": { "field": "interests" }\n    }\n  }\n}\n\'\n')])])]),t("p",[e._v("叫 Smith 的雇员中最受欢迎的兴趣爱好")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "172.16.20.64:39200/megacorp/employee/_search" -H \'Content-Type: application/json\' -d\'\n{\n  "query": {\n    "match": {\n      "last_name": "smith"\n    }\n  },\n  "aggs": {\n    "all_interests": {\n      "terms": {\n        "field": "interests"\n      }\n    }\n  }\n}\n\'\n')])])]),t("p",[e._v("聚合还支持分级汇总 。比如，查询特定兴趣爱好员工的平均年龄：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "172.16.20.64:39200/megacorp/employee/_search" -H \'Content-Type: application/json\' -d\'\n{\n    "aggs" : {\n        "all_interests" : {\n            "terms" : { "field" : "interests" },\n            "aggs" : {\n                "avg_age" : {\n                    "avg" : { "field" : "age" }\n                }\n            }\n        }\n    }\n}\n\'\n')])])]),t("h3",{attrs:{id:"_1-2-集群原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-集群原理"}},[e._v("#")]),e._v(" 1.2 集群原理")]),e._v(" "),t("p",[t("strong",[e._v("集群概述")])]),e._v(" "),t("p",[e._v("原生支持水平扩容。")]),e._v(" "),t("p",[e._v("集群有一个主节点，负责索引、节点的创建、删除，但并不到文档级别，请求可以发到任意节点，因此主节点的负载并不会比普通节点高很多。")]),e._v(" "),t("p",[t("strong",[e._v("集群健康")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/_cluster/health"\n')])])]),t("p",[e._v("green所有的主分片和副本分片都正常运行。\nyellow所有的主分片都正常运行，但不是所有的副本分片都正常运行。\nred有主分片没能正常运行。")]),e._v(" "),t("p",[t("strong",[e._v("添加索引")])]),e._v(" "),t("p",[e._v("一个分片是一个底层的工作单元 ，它仅保存了全部数据中的一部分。一个分片是一个 Lucene 的实例，它本身就是一个完整的搜索引擎。")]),e._v(" "),t("p",[e._v("Elasticsearch 是利用分片将数据分发到集群内各处的。分片是数据的容器，文档保存在分片内，分片又被分配到集群内的各个节点里。 当你的集群规模扩大或者缩小时， Elasticsearch 会自动的在各节点中迁移分片，使得数据仍然均匀分布在集群里。")]),e._v(" "),t("p",[e._v("一个分片可以是 主 分片或者 副本 分片。 索引内任意一个文档都归属于一个主分片，所以主分片的数目决定着索引能够保存的最大数据量。")]),e._v(" "),t("p",[e._v("技术上来说，一个主分片最大能够存储 Integer.MAX_VALUE - 128 个文档，但是实际最大值还需要参考你的使用场景：包括你使用的硬件， 文档的大小和复杂程度，索引和查询文档的方式以及你期望的响应时长。")]),e._v(" "),t("p",[e._v("一个副本分片只是一个主分片的拷贝。 副本分片作为硬件故障时保护数据不丢失的冗余备份，并为搜索和返回文档等读操作提供服务。")]),e._v(" "),t("p",[e._v("在同一个节点上既保存原始数据又保存副本是没有意义的，因为一旦失去了那个节点，我们也将丢失该节点上的所有副本数据。")]),e._v(" "),t("p",[t("strong",[e._v("注释：查阅最新文档可知，每个索引默认有5个主分片，1个副本即5个副分片，从7.0版开始默认1个主分片")])]),e._v(" "),t("p",[t("strong",[e._v("添加故障转移")])]),e._v(" "),t("p",[e._v("当第二个节点加入到集群后，3个 "),t("em",[e._v("副本分片")]),e._v(" 将会分配到这个节点上。 这意味着当集群内任何一个节点出现问题时，我们的数据都完好无损。")]),e._v(" "),t("p",[t("strong",[e._v("水平扩容")])]),e._v(" "),t("p",[e._v("Node 1 和 Node 2 上各有一个分片被迁移到了新的 Node 3 节点，现在每个节点上都拥有2个分片，而不是之前的3个。 这表示每个节点的硬件资源（CPU, RAM, I/O）将被更少的分片所共享，每个分片的性能将会得到提升。")]),e._v(" "),t("p",[e._v("分片是一个功能完整的搜索引擎，它拥有使用一个节点上的所有资源的能力。 我们这个拥有6个分片（3个主分片和3个副本分片）的索引可以最大扩容到6个节点，每个节点上存在一个分片，并且每个分片拥有所在节点的全部资源。")]),e._v(" "),t("p",[e._v("主分片的数目在索引创建时 就已经确定了下来。但是，读操作—搜索和返回数据—可以同时被主分片 或 副本分片所处理，所以当你拥有越多的副本分片时，也将拥有越高的吞吐量。")]),e._v(" "),t("p",[e._v("动态调整集群的副本数从默认的 "),t("code",[e._v("1")]),e._v("增加到 "),t("code",[e._v("2")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("curl -X PUT \"localhost:9200/blogs/_settings\" -H 'Content-Type: application/json' -d'\n{\n   \"number_of_replicas\" : 2\n}\n'\n")])])]),t("p",[e._v("索引现在拥有9个分片：3个主分片和6个副本分片。 这意味着我们可以将集群扩容到9个节点，每个节点上一个分片。")]),e._v(" "),t("p",[t("strong",[e._v("应对故障")])]),e._v(" "),t("p",[e._v("手动关掉一个节点node1，发生的第一件事就是选举新master。")]),e._v(" "),t("p",[e._v("在失去node1的同时，也失去了node1上的主分片，此时集群的状态是"),t("code",[e._v("red")]),e._v("。其他节点的副本分片会提升为主分片，这个提升主分片的过程是瞬间发生的，如同按下一个开关一般，此时集群的状态将会为 "),t("code",[e._v("yellow")]),e._v(" 。")]),e._v(" "),t("p",[e._v("如果我们重新启动 "),t("code",[e._v("Node 1")]),e._v(" ，集群可以将缺失的副本分片再次进行分配，集群的状态恢复为"),t("code",[e._v("green")]),e._v("， 如果 "),t("code",[e._v("Node 1")]),e._v(" 依然拥有着之前的分片，它将尝试去重用它们，同时仅从主分片复制发生了修改的数据文件。")]),e._v(" "),t("h3",{attrs:{id:"_1-3-数据增删查改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-数据增删查改"}},[e._v("#")]),e._v(" 1.3 数据增删查改")]),e._v(" "),t("p",[t("strong",[e._v("索引一个文档")])]),e._v(" "),t("p",[e._v("PUT 表示使用这个URL存储文档，自带ID")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X PUT "localhost:9200/website/blog/123" -H \'Content-Type: application/json\' -d\'\n{\n  "title": "My first blog entry",\n  "text":  "Just trying this out...",\n  "date":  "2014/01/01"\n}\n\'\n')])])]),t("p",[e._v("POST 表示存储文档在这个命名空间下，系统自动生成ID")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X POST "localhost:9200/website/blog/" -H \'Content-Type: application/json\' -d\'\n{\n  "title": "My second blog entry",\n  "text":  "Still trying this out...",\n  "date":  "2014/01/01"\n}\n\'\n')])])]),t("p",[t("strong",[e._v("取回一个文档")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/website/blog/123?pretty"\n')])])]),t("p",[e._v("显示响应的头部")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("curl -i -XGET http://localhost:9200/website/blog/124?pretty\n")])])]),t("p",[e._v("返回文档的一部分")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/website/blog/123?_source=title,text"\n')])])]),t("p",[e._v("只要source")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/website/blog/123/_source"\n')])])]),t("p",[t("strong",[e._v("检查文档是否存在")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("curl -i -XHEAD http://localhost:9200/website/blog/123\n")])])]),t("p",[t("strong",[e._v("更新整个文档")])]),e._v(" "),t("p",[e._v("在 Elasticsearch 中文档是 "),t("em",[e._v("不可改变")]),e._v(" 的，不能修改它们。如果想要更新现有的文档，需要 "),t("em",[e._v("重建索引")]),e._v("或者进行替换")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X PUT "localhost:9200/website/blog/123" -H \'Content-Type: application/json\' -d\'\n{\n  "title": "My first blog entry",\n  "text":  "I am starting to get the hang of this...",\n  "date":  "2014/01/02"\n}\n\'\n')])])]),t("p",[e._v("返回结果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "_index" :   "website",\n  "_type" :    "blog",\n  "_id" :      "123",\n  "_version" : 2,\n  "created":   false \n}\n')])])]),t("p",[e._v("_version 字段值增加了，created 标志设置成 false ，是因为相同的索引、类型和 ID 的文档已经存在。")]),e._v(" "),t("p",[e._v("在内部，Elasticsearch 已将旧文档标记为已删除，并增加一个全新的文档。 尽管你不能再对旧版本的文档进行访问，但它并不会立即消失。当继续索引更多的数据，Elasticsearch 会在后台清理这些已删除文档。")]),e._v(" "),t("p",[t("strong",[e._v("创建新文档")])]),e._v(" "),t("p",[e._v("使用PUT有可能是创建，也有可能是更新。确保创建新文档可以使用POST，但有可能相同内容的文档已存在，这样创建只是_id不同。以下是更好的方式")]),e._v(" "),t("p",[e._v("方法1")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("PUT /website/blog/123?op_type=create\n{ ... }\n")])])]),t("p",[e._v("方法2")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("PUT /website/blog/123/_create\n{ ... }\n")])])]),t("p",[e._v("如果创建新文档的请求成功执行，Elasticsearch 会返回元数据和一个 201 Created 的 HTTP 响应码。")]),e._v(" "),t("p",[e._v("另一方面，如果文档已经存在，Elasticsearch 将会返回 409 Conflict 响应码。")]),e._v(" "),t("p",[t("strong",[e._v("删除文档")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X DELETE "localhost:9200/website/blog/123"\n')])])]),t("p",[t("strong",[e._v("处理并发冲突")])]),e._v(" "),t("p",[e._v("比较典型的是秒杀场景，读取文档，修改库存，然后更新文档，当两个请求同时读到库存（比如100），分别修改库存为99，实际库存为98，这就是并发冲突。")]),e._v(" "),t("p",[t("em",[e._v("悲观并发控制")])]),e._v(" "),t("p",[e._v("这种方法被关系型数据库广泛使用，它假定有变更冲突可能发生，因此阻塞访问资源以防止冲突。 一个典型的例子是读取一行数据之前先将其锁住，确保只有放置锁的线程能够对这行数据进行修改。")]),e._v(" "),t("p",[t("em",[e._v("乐观并发控制")])]),e._v(" "),t("p",[e._v("Elasticsearch 中使用的这种方法假定冲突是不可能发生的，并且不会阻塞正在尝试的操作。 然而，如果源数据在读写当中被修改，更新将会失败。应用程序接下来将决定该如何解决冲突。 例如，可以重试更新、使用新的数据、或者将相关情况报告给用户。")]),e._v(" "),t("p",[t("strong",[e._v("乐观并发控制")])]),e._v(" "),t("p",[e._v("关键就是利用了_version字段。先获取文档，返回结果里有 _version字段，假设值为1。接下来我们做更新，只有现在的 _version 为 1 时，本次更新才能成功。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X PUT "localhost:9200/website/blog/1?version=1" -H \'Content-Type: application/json\' -d\'\n{\n  "title": "My first blog entry",\n  "text":  "Starting to get the hang of this..."\n}\n\'\n')])])]),t("p",[e._v("当冲突发生时，该怎么做取决于应用需求。可以告诉用户说其他人已经修改了文档，并且在再次保存之前检查这些修改内容。 或者，在之前的秒杀场景，可以获取到最新的文档并尝试重新应用这些修改。")]),e._v(" "),t("p",[t("strong",[e._v("通过外部系统使用版本控制")])]),e._v(" "),t("p",[e._v("如果你的主数据库已经有了版本号 — 或一个能作为版本号的字段值比如 timestamp — 那么你就可以在 Elasticsearch 中通过增加 version_type=external 到查询字符串的方式重用这些相同的版本号，版本号最大是long型。")]),e._v(" "),t("p",[e._v("外部版本号的处理方式和我们之前讨论的内部版本号的处理方式有些不同， Elasticsearch 不是检查当前 "),t("code",[e._v("_version")]),e._v(" 和请求中指定的版本号是否相同， 而是检查当前 "),t("code",[e._v("_version")]),e._v(" 是否 "),t("em",[e._v("小于")]),e._v(" 指定的版本号。 如果请求成功，外部的版本号作为文档的新 "),t("code",[e._v("_version")]),e._v(" 进行存储。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X PUT "localhost:9200/website/blog/2?version=5&version_type=external" -H \'Content-Type: application/json\' -d\'\n{\n  "title": "My first external blog entry",\n  "text":  "Starting to get the hang of this..."\n}\n\'\n')])])]),t("p",[t("strong",[e._v("文档的部分更新")])]),e._v(" "),t("p",[e._v("增加字段 "),t("code",[e._v("tags")]),e._v(" 和 "),t("code",[e._v("views")]),e._v(" 到我们的博客文章")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X POST "localhost:9200/website/blog/1/_update" -H \'Content-Type: application/json\' -d\'\n{\n   "doc" : {\n      "tags" : [ "testing" ],\n      "views": 0\n   }\n}\n\'\n')])])]),t("p",[e._v("使用脚本更新（脚本功能默认禁用）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X POST "localhost:9200/website/blog/1/_update" -H \'Content-Type: application/json\' -d\'\n{\n   "script" : "ctx._source.views+=1"\n}\n\'\n')])])]),t("p",[e._v("脚本的更多内容参见原文。")]),e._v(" "),t("p",[t("strong",[e._v("upsert操作")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X POST "localhost:9200/website/pageviews/1/_update" -H \'Content-Type: application/json\' -d\'\n{\n   "script" : "ctx._source.views+=1",\n   "upsert": {\n       "views": 1\n   }\n}\n\'\n')])])]),t("p",[e._v("第一次运行这个请求时， upsert 值作为新文档被索引，初始化 views 字段为 1 。 在后续的运行中，由于文档已经存在， script 更新操作将替代 upsert 进行应用，对 views 计数器进行累加。")]),e._v(" "),t("p",[t("strong",[e._v("更新和冲突")])]),e._v(" "),t("p",[e._v("对于执行顺序无关的情形，只要重试就可以了")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X POST "localhost:9200/website/pageviews/1/_update?retry_on_conflict=5" -H \'Content-Type: application/json\' -d\'\n{\n   "script" : "ctx._source.views+=1",\n   "upsert": {\n       "views": 0\n   }\n}\n\'\n')])])]),t("p",[t("strong",[e._v("取回多个文档")])]),e._v(" "),t("p",[t("code",[e._v("mget")]),e._v(" API 要求有一个 "),t("code",[e._v("docs")]),e._v(" 数组作为参数，每个 元素包含需要检索文档的元数据， 包括 "),t("code",[e._v("_index")]),e._v(" 、 "),t("code",[e._v("_type")]),e._v("和 "),t("code",[e._v("_id")]),e._v(" 。如果你想检索一个或者多个特定的字段，那么你可以通过 "),t("code",[e._v("_source")]),e._v(" 参数来指定这些字段的名字：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/_mget" -H \'Content-Type: application/json\' -d\'\n{\n   "docs" : [\n      {\n         "_index" : "website",\n         "_type" :  "blog",\n         "_id" :    2\n      },\n      {\n         "_index" : "website",\n         "_type" :  "pageviews",\n         "_id" :    1,\n         "_source": "views"\n      }\n   ]\n}\n\'\n')])])]),t("p",[e._v("如果想检索的数据都在相同的 "),t("code",[e._v("_index")]),e._v(" 中（甚至相同的 "),t("code",[e._v("_type")]),e._v(" 中），则可以在 URL 中指定默认的 "),t("code",[e._v("/_index")]),e._v("或者默认的 "),t("code",[e._v("/_index/_type")]),e._v(" 。你仍然可以通过单独请求覆盖这些值：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/website/blog/_mget" -H \'Content-Type: application/json\' -d\'\n{\n   "docs" : [\n      { "_id" : 2 },\n      { "_type" : "pageviews", "_id" :   1 }\n   ]\n}\n\'\n')])])]),t("p",[e._v("事实上，如果所有文档的 "),t("code",[e._v("_index")]),e._v(" 和 "),t("code",[e._v("_type")]),e._v(" 都是相同的，你可以只传一个 "),t("code",[e._v("ids")]),e._v(" 数组，而不是整个 "),t("code",[e._v("docs")]),e._v(" 数组：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('GET /website/blog/_mget\n{\n   "ids" : [ "2", "1" ]\n}\n')])])]),t("p",[e._v("即使有某个文档没有找到，上述请求的 HTTP 状态码仍然是 "),t("code",[e._v("200")]),e._v(" 。事实上，即使请求 没有找到任何文档，它的状态码依然是 "),t("code",[e._v("200")]),e._v(" --因为 "),t("code",[e._v("mget")]),e._v(" 请求本身已经成功执行。 为了确定某个文档查找是成功或者失败，你需要检查 "),t("code",[e._v("found")]),e._v(" 标记。")]),e._v(" "),t("p",[t("strong",[e._v("代价较小的批量操作")])]),e._v(" "),t("p",[e._v("bulk API 允许在单个步骤中进行多次 create 、 index 、 update 或 delete 请求。")]),e._v(" "),t("p",[e._v("这块比较复杂，"),t("a",{attrs:{href:"https://www.elastic.co/guide/cn/elasticsearch/guide/cn/bulk.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("参见原文"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"_1-4-分布式文档存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-分布式文档存储"}},[e._v("#")]),e._v(" 1.4 分布式文档存储")]),e._v(" "),t("h3",{attrs:{id:"_1-5-搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-搜索"}},[e._v("#")]),e._v(" 1.5 搜索")]),e._v(" "),t("p",[e._v("书中给的脚本执行报错")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('illegal_argument_exception","reason":"Failed to parse value [1] as only [true] or [false] are allowed.\n')])])]),t("p",[e._v("这是因为pretty=1已经不支持了，改成pretty=true即可，或者删掉这个。")]),e._v(" "),t("p",[e._v("后来又报这样一个错，原因是ES6之后每个index下只能有一个type，"),t("a",{attrs:{href:"https://www.elastic.co/blog/index-type-parent-child-join-now-future-in-elasticsearch",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入理解1"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入理解2"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("final mapping would have more than 1 type error\n")])])]),t("p",[e._v("对脚本做了修改，添加2个用户")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -XPUT \'http://localhost:9200/us/user/1\' -d \'\n{\n   "email" : "john@smith.com",\n   "name" : "John Smith",\n   "username" : "@john"\n}\n\'\n\ncurl -XPUT \'http://localhost:9200/us/user/2\' -d \'\n{\n   "email" : "mary@jones.com",\n   "name" : "Mary Jones",\n   "username" : "@mary"\n}\n\'\n')])])]),t("p",[e._v("添加12个tweet")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -XPUT \'http://172.16.20.64:39200/gb/tweet/3\' -d \'\n{\n   "date" : "2014-09-13",\n   "name" : "Mary Jones",\n   "tweet" : "Elasticsearch means full text search has never been so easy",\n   "user_id" : 2\n}\n\'\n\ncurl -XPUT \'http://localhost:9200/gb/tweet/4\' -d \'\n{\n   "date" : "2014-09-14",\n   "name" : "John Smith",\n   "tweet" : "@mary it is not just text, it does everything",\n   "user_id" : 1\n}\n\'\n\ncurl -XPUT \'http://172.16.20.64:39200/gb/tweet/5\' -d \'\n{\n   "date" : "2014-09-15",\n   "name" : "Mary Jones",\n   "tweet" : "However did I manage before Elasticsearch?",\n   "user_id" : 2\n}\n\'\n\ncurl -XPUT \'http://localhost:9200/gb/tweet/6\' -d \'\n{\n   "date" : "2014-09-16",\n   "name" : "John Smith",\n   "tweet" : "The Elasticsearch API is really easy to use",\n   "user_id" : 1\n}\n\'\n\ncurl -XPUT \'http://172.16.20.64:39200/gb/tweet/7\' -d \'\n{\n   "date" : "2014-09-17",\n   "name" : "Mary Jones",\n   "tweet" : "The Query DSL is really powerful and flexible",\n   "user_id" : 2\n}\n\'\n\ncurl -XPUT \'http://localhost:9200/gb/tweet/8\' -d \'\n{\n   "date" : "2014-09-18",\n   "name" : "John Smith",\n   "user_id" : 1\n}\n\'\n\ncurl -XPUT \'http://172.16.20.64:39200/gb/tweet/9\' -d \'\n{\n   "date" : "2014-09-19",\n   "name" : "Mary Jones",\n   "tweet" : "Geo-location aggregations are really cool",\n   "user_id" : 2\n}\n\'\n\ncurl -XPUT \'http://localhost:9200/gb/tweet/10\' -d \'\n{\n   "date" : "2014-09-20",\n   "name" : "John Smith",\n   "tweet" : "Elasticsearch surely is one of the hottest new NoSQL products",\n   "user_id" : 1\n}\n\'\n\ncurl -XPUT \'http://172.16.20.64:39200/gb/tweet/11\' -d \'\n{\n   "date" : "2014-09-21",\n   "name" : "Mary Jones",\n   "tweet" : "Elasticsearch is built for the cloud, easy to scale",\n   "user_id" : 2\n}\n\'\n\ncurl -XPUT \'http://localhost:9200/gb/tweet/12\' -d \'\n{\n   "date" : "2014-09-22",\n   "name" : "John Smith",\n   "tweet" : "Elasticsearch and I have left the honeymoon stage, and I still love her.",\n   "user_id" : 1\n}\n\'\n\ncurl -XPUT \'http://172.16.20.64:39200/gb/tweet/13\' -d \'\n{\n   "date" : "2014-09-23",\n   "name" : "Mary Jones",\n   "tweet" : "So yes, I am an Elasticsearch fanboy",\n   "user_id" : 2\n}\n\'\n\ncurl -XPUT \'http://localhost:9200/gb/tweet/14\' -d \'\n{\n   "date" : "2014-09-24",\n   "name" : "John Smith",\n   "tweet" : "How many more cheesy tweets do I have to write?",\n   "user_id" : 1\n}\n\'\n')])])]),t("h4",{attrs:{id:"_1-5-1空搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1空搜索"}},[e._v("#")]),e._v(" 1.5.1空搜索")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/_search"\n')])])]),t("p",[e._v("这个搜索可以得到一些汇总情况。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("GET /_search?timeout=10ms\n")])])]),t("p",[e._v("可以指定超时时间，如果超时，结果中的time_out为true，但结果仍会返回。")]),e._v(" "),t("h4",{attrs:{id:"_1-5-2-多索引多类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-多索引多类型"}},[e._v("#")]),e._v(" 1.5.2 多索引多类型")]),e._v(" "),t("p",[e._v("这一节的内容应该已经失效了，至少ES6以后已经没有多类型了。但是多索引应该有参考价值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/gb,us/_search\n")])])]),t("p",[e._v("在 "),t("code",[e._v("gb")]),e._v(" 和 "),t("code",[e._v("us")]),e._v(" 索引中搜索所有的文档")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/g*,u*/_search\n")])])]),t("p",[e._v("在任何以 "),t("code",[e._v("g")]),e._v(" 或者 "),t("code",[e._v("u")]),e._v(" 开头的索引中搜索所有的类型")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/_all/tweet/_search\n")])])]),t("p",[e._v("在所有的索引中搜索  "),t("code",[e._v("tweet")]),e._v(" 类型")]),e._v(" "),t("h4",{attrs:{id:"_1-5-3-分页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-3-分页"}},[e._v("#")]),e._v(" 1.5.3 分页")]),e._v(" "),t("p",[e._v("和 SQL 使用 "),t("code",[e._v("LIMIT")]),e._v(" 关键字返回单个 "),t("code",[e._v("page")]),e._v(" 结果的方法相同，Elasticsearch 接受 "),t("code",[e._v("from")]),e._v(" 和 "),t("code",[e._v("size")]),e._v(" 参数：")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("size")])]),e._v(" "),t("p",[e._v("显示应该返回的结果数量，默认是 "),t("code",[e._v("10")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("from")])]),e._v(" "),t("p",[e._v("显示应该跳过的初始结果数量，默认是 "),t("code",[e._v("0")])])])]),e._v(" "),t("p",[e._v("如果每页展示 5 条结果，可以用下面方式请求得到 1 到 3 页的结果：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/_search?size=5"\ncurl -X GET "localhost:9200/_search?size=5&from=5"\ncurl -X GET "localhost:9200/_search?size=5&from=10"\n')])])]),t("p",[e._v("考虑到分页过深以及一次请求太多结果的情况，结果集在返回之前先进行排序。 但请记住一个请求经常跨越多个分片，每个分片都产生自己的排序结果，这些结果需要进行集中排序以保证整体顺序是正确的。")]),e._v(" "),t("p",[t("strong",[e._v("深度分页的问题")])]),e._v(" "),t("p",[e._v("理解为什么深度分页是有问题的，我们可以假设在一个有 5 个主分片的索引中搜索。 当我们请求结果的第一页（结果从 1 到 10 ），每一个分片产生前 10 的结果，并且返回给 "),t("em",[e._v("协调节点")]),e._v(" ，协调节点对 50 个结果排序得到全部结果的前 10 个。")]),e._v(" "),t("p",[e._v("现在假设我们请求第 1000 页--结果从 10001 到 10010 。每个分片不得不产生前10010个结果， 然后协调节点对全部 50050 个结果排序，最后丢弃掉这些结果中的 50040 个结果。")]),e._v(" "),t("p",[e._v("可以看到，在分布式系统中，对结果排序的成本随分页的深度成指数上升。这就是 web 搜索引擎对任何查询都不要返回超过 1000 个结果的原因。")]),e._v(" "),t("h4",{attrs:{id:"_1-5-4-轻量搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-4-轻量搜索"}},[e._v("#")]),e._v(" 1.5.4 轻量搜索")]),e._v(" "),t("p",[e._v("轻量搜索就是查询参数都在url中的搜索，相对的是“请求体搜索”，在请求body中携带更复杂的查询条件。")]),e._v(" "),t("p",[e._v("查询"),t("code",[e._v("gb")]),e._v("索引在 "),t("code",[e._v("tweet")]),e._v(" 类型中 "),t("code",[e._v("tweet")]),e._v(" 字段包含 "),t("code",[e._v("elasticsearch")]),e._v(" 单词的文档")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/gb/tweet/_search?q=tweet:elasticsearch"\n')])])]),t("p",[e._v("下一个查询在 "),t("code",[e._v("name")]),e._v(" 字段中包含 "),t("code",[e._v("marry")]),e._v(" 并且在 "),t("code",[e._v("tweet")]),e._v(" 字段中包含 "),t("code",[e._v("full")]),e._v(" 的文档。实际的查询就是这样")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("GET /gb/tweet/_search?q=+name:mary +tweet:full\n")])])]),t("p",[e._v("但是用curl时符号要转码，%2B是加号，%3A是冒号，随便找个在线URL加解码网站就可以转换")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/_search?q=%2Bname%3Amary%2Btweet%3Afull"\n')])])]),t("p",[t("code",[e._v("+")]),e._v(" 前缀表示必须与查询条件匹配。类似地， "),t("code",[e._v("-")]),e._v(" 前缀表示一定不与查询条件匹配。没有 "),t("code",[e._v("+")]),e._v(" 或者 "),t("code",[e._v("-")]),e._v(" 的所有其他条件都是可选的——匹配的越多，文档就越相关。")]),e._v(" "),t("p",[t("strong",[e._v("_all字段")])]),e._v(" "),t("p",[e._v("试试这个查询")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("GET /us,gb/user,tweet/_search?q=mary\n")])])]),t("p",[e._v("这个查询的结果在三个地方提到了 "),t("code",[e._v("mary")]),e._v("：")]),e._v(" "),t("ul",[t("li",[e._v("有一个用户叫做 Mary")]),e._v(" "),t("li",[e._v("6条微博发自 Mary")]),e._v(" "),t("li",[e._v("一条微博直接 @mary")])]),e._v(" "),t("p",[e._v("当索引一个文档的时候，Elasticsearch 取出所有字段的值拼接成一个大的字符串，作为 _all 字段进行索引。例如，当索引这个文档时：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "tweet":    "However did I manage before Elasticsearch?",\n    "date":     "2014-09-14",\n    "name":     "Mary Jones",\n    "user_id":  1\n}\n')])])]),t("p",[e._v("这就好似增加了一个名叫 "),t("code",[e._v("_all")]),e._v(" 的额外字段：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"However did I manage before Elasticsearch? 2014-09-14 Mary Jones 1"\n')])])]),t("p",[e._v("除非设置特定字段，否则查询字符串就使用 "),t("code",[e._v("_all")]),e._v(" 字段进行搜索。")]),e._v(" "),t("p",[e._v("当 _all 字段不再有用的时候，可以将它置为失效。")]),e._v(" "),t("p",[t("strong",[e._v("更复杂的查询")])]),e._v(" "),t("p",[e._v("这个例子直接看书吧，总体来说，轻量搜索一般用在开发、测试阶段，生产上还是用请求体查询。")]),e._v(" "),t("h3",{attrs:{id:"_1-6-映射和分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-映射和分析"}},[e._v("#")]),e._v(" 1.6 映射和分析")]),e._v(" "),t("p",[e._v("这一节的内容有些过时了，书中说")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("GET /_search?q=2014              # 12 results\nGET /_search?q=2014-09-15        # 12 results !\nGET /_search?q=date:2014-09-15   # 1  result\nGET /_search?q=date:2014         # 0  results !\n")])])]),t("p",[e._v("但实际结果是")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("GET /gb/tweet/_search?q=2014              # 0 result\nGET /gb/tweet/_search?q=2014-09-15        # 1 result\nGET /gb/tweet/_search?q=date:2014-09-15   # 1 result\nGET /gb/tweet/_search?q=date:2014         # 0 result\n")])])]),t("p",[e._v("猜测是_all没有开启，"),t("a",{attrs:{href:"https://www.elastic.co/guide/cn/elasticsearch/guide/cn/root-object.html#all-field",target:"_blank",rel:"noopener noreferrer"}},[e._v(" _all的配置"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("尝试开启_all，结果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Enabling [_all] is disabled in 6.0. As a replacement, you can use [copy_to] on mapping fields to create your own catch all field.\n")])])]),t("p",[t("strong",[e._v("查看映射")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("GET /gb/_mapping/tweet\n")])])]),t("p",[e._v("按书中的解释，date字段是date类型的，_all是string类型，索引方式不同，所以查询结果不同。")]),e._v(" "),t("p",[e._v("但在ES6里，string都被表示成了text类型，用了field映射，如下是ES6的返回结果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "gb": {\n    "mappings": {\n      "tweet": {\n        "properties": {\n          "date": {\n            "type": "date"\n          },\n          "name": {\n            "type": "text",\n            "fields": {\n              "keyword": {\n                "type": "keyword",\n                "ignore_above": 256\n              }\n            }\n          },\n          "tweet": {\n            "type": "text",\n            "fields": {\n              "keyword": {\n                "type": "keyword",\n                "ignore_above": 256\n              }\n            }\n          },\n          "user_id": {\n            "type": "long"\n          }\n        }\n      }\n    }\n  }\n}\n')])])]),t("p",[t("strong",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html#_field_datatypes",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES6的字段类型"),t("OutboundLink")],1)])]),e._v(" "),t("h4",{attrs:{id:"_1-6-1-精确值和全文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-1-精确值和全文"}},[e._v("#")]),e._v(" 1.6.1 精确值和全文")]),e._v(" "),t("p",[e._v("Elasticsearch 中的数据可以概括的分为两类：精确值和全文。")]),e._v(" "),t("p",[e._v("精确值 如它们听起来那样精确。例如日期或者用户 ID，但字符串也可以表示精确值，例如用户名或邮箱地址。对于精确值来讲，Foo 和 foo 是不同的，2014 和 2014-09-15 也是不同的。")]),e._v(" "),t("p",[e._v("另一方面，全文 是指文本数据（通常以人类容易识别的语言书写），例如一个推文的内容或一封邮件的内容。")]),e._v(" "),t("p",[e._v("精确值很容易查询。结果是二进制的：要么匹配查询，要么不匹配。这种查询很容易用 SQL 表示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('WHERE name    = "John Smith"\n  AND user_id = 2\n  AND date    > "2014-09-15"\n')])])]),t("p",[e._v("查询全文数据要微妙的多。我们问的不只是“这个文档匹配查询吗”，而是“该文档匹配查询的程度有多大？”换句话说，该文档与给定查询的相关性如何？")]),e._v(" "),t("p",[e._v("查询全文数据要微妙的多。我们问的不只是“这个文档匹配查询吗”，而是“该文档匹配查询的程度有多大？”换句话说，该文档与给定查询的相关性如何？")]),e._v(" "),t("p",[e._v("我们很少对全文类型的域做精确匹配。相反，我们希望在文本类型的域中搜索。不仅如此，我们还希望搜索能够理解我们的 "),t("em",[e._v("意图")]),e._v(" ：")]),e._v(" "),t("ul",[t("li",[e._v("搜索 "),t("code",[e._v("UK")]),e._v(" ，会返回包含 "),t("code",[e._v("United Kindom")]),e._v(" 的文档。")]),e._v(" "),t("li",[e._v("搜索 "),t("code",[e._v("jump")]),e._v(" ，会匹配 "),t("code",[e._v("jumped")]),e._v(" ， "),t("code",[e._v("jumps")]),e._v(" ， "),t("code",[e._v("jumping")]),e._v(" ，甚至是 "),t("code",[e._v("leap")]),e._v(" 。")]),e._v(" "),t("li",[e._v("搜索 "),t("code",[e._v("johnny walker")]),e._v(" 会匹配 "),t("code",[e._v("Johnnie Walker")]),e._v(" ， "),t("code",[e._v("johnnie depp")]),e._v(" 应该匹配 "),t("code",[e._v("Johnny Depp")]),e._v(" 。")]),e._v(" "),t("li",[t("code",[e._v("fox news hunting")]),e._v(" 应该返回福克斯新闻（ Foxs News ）中关于狩猎的故事，同时， "),t("code",[e._v("fox hunting news")]),e._v(" 应该返回关于猎狐的故事。")])]),e._v(" "),t("p",[e._v("为了促进这类在全文域中的查询，Elasticsearch 首先 "),t("em",[e._v("分析")]),e._v(" 文档，之后根据结果创建 "),t("em",[e._v("倒排索引")]),e._v(" 。在接下来的两节，我们会讨论倒排索引和分析过程。")]),e._v(" "),t("h4",{attrs:{id:"_1-6-2-倒排索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-2-倒排索引"}},[e._v("#")]),e._v(" 1.6.2 倒排索引")]),e._v(" "),t("p",[e._v("倒排索引之前我在别的地方学过了，不再重复记录，详见书中原文。")]),e._v(" "),t("h4",{attrs:{id:"_1-6-3-分析和分析器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-3-分析和分析器"}},[e._v("#")]),e._v(" 1.6.3 分析和分析器")]),e._v(" "),t("p",[e._v("分词和标准化的过程称为 "),t("em",[e._v("分析")]),e._v("（如果对这句话不理解，请看书中上一小节“倒排索引”）。")]),e._v(" "),t("p",[e._v("分析的过程")]),e._v(" "),t("ul",[t("li",[e._v("首先，将一块文本分成适合于倒排索引的独立的 "),t("em",[e._v("词条")]),e._v(" ，")]),e._v(" "),t("li",[e._v("之后，将这些词条统一化为标准格式以提高它们的“可搜索性”，或者叫 "),t("em",[e._v("recall")])])]),e._v(" "),t("p",[e._v("分析实际上有三个功能")]),e._v(" "),t("ul",[t("li",[e._v("字符过滤器：负责在分词前整理字符串，比如去掉HTML或把&转换为and")]),e._v(" "),t("li",[e._v("分词器：比如按空格或逗号分词")]),e._v(" "),t("li",[e._v("Token过滤器：改变词条（如Quick变quick）、删除词条（如‘and’、‘a’、‘the’等无用词）、或者增加词条（如像 "),t("code",[e._v("jump")]),e._v(" 和 "),t("code",[e._v("leap")]),e._v(" 这种同义词）")])]),e._v(" "),t("p",[e._v("Elasticsearch提供了开箱即用的字符过滤器、分词器和token 过滤器。 这些可以组合起来形成自定义的分析器以用于不同的目的。")]),e._v(" "),t("p",[t("strong",[e._v("内置的分析器")])]),e._v(" "),t("p",[e._v("为了分辨不同分析器的差别，给一个例子字符串")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"Set the shape to semi-transparent by calling set_trans(5)"\n')])])]),t("p",[e._v("标准分析器（默认）")]),e._v(" "),t("p",[e._v("它根据 "),t("a",{attrs:{href:"http://www.unicode.org/reports/tr29/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unicode 联盟"),t("OutboundLink")],1),e._v(" 定义的 "),t("em",[e._v("单词边界")]),e._v(" 划分文本。删除绝大部分标点。最后，将词条小写。它会产生")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("set, the, shape, to, semi, transparent, by, calling, set_trans, 5\n")])])]),t("p",[e._v("简单分析器")]),e._v(" "),t("p",[e._v("简单分析器在任何不是字母的地方分隔文本，将词条小写。它会产生")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("set, the, shape, to, semi, transparent, by, calling, set, trans\n")])])]),t("p",[e._v("语言分析器")]),e._v(" "),t("p",[e._v("特定语言分析器可用于 "),t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("很多语言"),t("OutboundLink")],1),e._v("。它们可以考虑指定语言的特点。例如， "),t("code",[e._v("英语")]),e._v(" 分析器附带了一组英语无用词（常用单词，例如 "),t("code",[e._v("and")]),e._v(" 或者 "),t("code",[e._v("the")]),e._v(" ，它们对相关性没有多少影响），它们会被删除。 由于理解英语语法的规则，这个分词器可以提取英语单词的 "),t("em",[e._v("词干")]),e._v(" 。")]),e._v(" "),t("p",[t("code",[e._v("英语")]),e._v(" 分词器会产生下面的词条：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("set, shape, semi, transpar, call, set_tran, 5\n")])])]),t("p",[e._v("注意看 "),t("code",[e._v("transparent")]),e._v("、 "),t("code",[e._v("calling")]),e._v(" 和 "),t("code",[e._v("set_trans")]),e._v(" 已经变为词根格式。")]),e._v(" "),t("p",[t("strong",[e._v("分析器的应用")])]),e._v(" "),t("p",[e._v("当我们 "),t("em",[e._v("索引")]),e._v(" 一个文档，它的全文域被分析成词条以用来创建倒排索引。搜索的时候也要经过相同的分析过程，这样保证搜索的词条和索引中的词条一致。")]),e._v(" "),t("ul",[t("li",[e._v("当你查询一个 "),t("em",[e._v("全文")]),e._v(" 字段时， 会对查询字符串应用相同的分析器，以产生正确的搜索词条列表。")]),e._v(" "),t("li",[e._v("当你查询一个 "),t("em",[e._v("精确值")]),e._v(" 字段时，不会分析查询字符串， 而是搜索你指定的精确值。")])]),e._v(" "),t("p",[e._v("现在可以来解释本节开始的搜索结果了。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("date")]),e._v(" 字段包含一个精确值：单独的词条 "),t("code",[e._v("2014-09-15")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("_all")]),e._v(" 字段是一个全文域，所以分词进程将日期转化为三个词条： "),t("code",[e._v("2014")]),e._v("， "),t("code",[e._v("09")]),e._v("， 和 "),t("code",[e._v("15")]),e._v("。")])]),e._v(" "),t("p",[t("strong",[e._v("测试分析器")])]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v("analyze")]),e._v(" API 来看文本是如何被分析的")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/_analyze" -H \'Content-Type: application/json\' -d\'\n{\n  "analyzer": "standard",\n  "text": "Text to analyze"\n}\n\'\n')])])]),t("p",[t("strong",[e._v("指定分析器")])]),e._v(" "),t("p",[e._v("当Elasticsearch在你的文档中检测到一个新的字符串字段 ，它会自动设置其为一个全文 "),t("code",[e._v("字符串")]),e._v(" 字段，使用 "),t("code",[e._v("标准")]),e._v(" 分析器对它进行分析。")]),e._v(" "),t("p",[e._v("可能你想使用一个不同的分析器，适用于你的数据使用的语言。有时候你想要一个字符串域就是一个字符串域--不使用分析，直接索引你传入的精确值，例如用户ID或者一个内部的状态域或标签。下一节的映射就是用来干这个的。")]),e._v(" "),t("h4",{attrs:{id:"_1-6-4-映射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-4-映射"}},[e._v("#")]),e._v(" 1.6.4 映射")]),e._v(" "),t("p",[e._v("为了能够将时间域视为时间，数字域视为数字，字符串字段视为全文或精确值字符串， Elasticsearch 需要知道每个字段中数据的类型。这个信息包含在映射中。本节是映射的入门内容，后边还会详述。")]),e._v(" "),t("p",[e._v("本小节的内容有些过时了 直接看最新文档更好 "),t("strong",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html#_field_datatypes",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES6的字段类型"),t("OutboundLink")],1)]),e._v("。在最新的ES中，string类型被拆成了text（全文字段）和keyword（精确字段）。")]),e._v(" "),t("p",[t("strong",[e._v("查看映射")])]),e._v(" "),t("p",[e._v("1.6节开始就讲了如何查看映射。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("GET /gb/_mapping/tweet\n")])])]),t("p",[e._v("如果想要自己创建映射，需要先创建空索引")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("PUT cars \n{}\n")])])]),t("p",[t("strong",[e._v("更新映射")])]),e._v(" "),t("p",[e._v("可以为索引增加映射，但不能修改已存在字段的映射。如果一个字段的映射已经存在，那么该字段的数据可能已经被索引。如果你意图修改这个字段的映射，索引的数据可能会出错，不能被正常的搜索。")]),e._v(" "),t("p",[e._v("一个添加字段映射的例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('PUT /postcodes_test/_mapping/address\n{\n  "properties": {\n    "abcd": {\n      "type": "keyword"\n    }\n  }\n}\n')])])]),t("p",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("更新映射官方文档"),t("OutboundLink")],1)]),e._v(" "),t("h4",{attrs:{id:"_1-6-5-复杂核心类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-5-复杂核心类型"}},[e._v("#")]),e._v(" 1.6.5 复杂核心类型")]),e._v(" "),t("p",[e._v("指的是JSON中的"),t("code",[e._v("null")]),e._v(" 值，数组，和对象。")]),e._v(" "),t("p",[e._v("数组中所有的值必须是相同数据类型。不能对数组内部进行排序。")]),e._v(" "),t("p",[t("strong",[e._v("空类型")])]),e._v(" "),t("p",[e._v("下面三种值被认为是空的，它们将不会被索引：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"null_value":               null,\n"empty_array":              [],\n"array_with_null_value":    [ null ]\n')])])]),t("p",[t("strong",[e._v("多层级对象")])]),e._v(" "),t("p",[e._v("例如，与其在 "),t("code",[e._v("tweet")]),e._v(" 文档中包含 "),t("code",[e._v("user_name")]),e._v(" 和 "),t("code",[e._v("user_id")]),e._v(" 域，我们也可以这样写：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "tweet":            "Elasticsearch is very flexible",\n    "user": {\n        "id":           "@johnsmith",\n        "gender":       "male",\n        "age":          26,\n        "name": {\n            "full":     "John Smith",\n            "first":    "John",\n            "last":     "Smith"\n        }\n    }\n}\n')])])]),t("p",[t("strong",[e._v("内部对象的映射")])]),e._v(" "),t("p",[e._v("Elasticsearch 会动态监测新的对象字段并映射它们为"),t("code",[e._v("对象")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "gb": {\n    "tweet": { \n      "properties": {\n        "tweet": { "type": "string" },\n        "user": { \n          "type": "object",\n          "properties": {\n            "id": { "type": "string" },\n            "gender": { "type": "string" },\n            "age": { "type": "long" },\n            "name":   { \n              "type":  "object",\n              "properties": {\n                "full": { "type": "string" },\n                "first": { "type": "string" },\n                "last": { "type": "string" }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n')])])]),t("p",[t("code",[e._v("user")]),e._v(" 和 "),t("code",[e._v("name")]),e._v(" 域的映射结构与 "),t("code",[e._v("tweet")]),e._v(" 类型的相同。事实上， "),t("code",[e._v("type")]),e._v(" 映射只是一种特殊的 "),t("code",[e._v("对象")]),e._v(" 映射，我们称之为 "),t("em",[e._v("根对象")]),e._v(" 。除了它有一些文档元数据的特殊顶级域，例如 "),t("code",[e._v("_source")]),e._v(" 和 "),t("code",[e._v("_all")]),e._v(" 域，它和其他对象一样。")]),e._v(" "),t("p",[t("strong",[e._v("内部对象是如何被索引的")])]),e._v(" "),t("p",[e._v("Lucene 不理解内部对象。 Lucene 文档是由一组键值对列表组成的。为了能让 Elasticsearch 有效地索引内部类，它把我们的文档转化成这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "tweet":            [elasticsearch, flexible, very],\n    "user.id":          [@johnsmith],\n    "user.gender":      [male],\n    "user.age":         [26],\n    "user.name.full":   [john, smith],\n    "user.name.first":  [john],\n    "user.name.last":   [smith]\n}\n')])])]),t("p",[e._v("在这个简单扁平的文档中，没有 "),t("code",[e._v("user")]),e._v(" 和 "),t("code",[e._v("user.name")]),e._v(" 域。Lucene 索引只有标量和简单值，没有复杂数据结构。")]),e._v(" "),t("p",[t("strong",[e._v("内部对象数组")])]),e._v(" "),t("p",[e._v("假设我们有个 "),t("code",[e._v("followers")]),e._v(" 数组：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "followers": [\n        { "age": 35, "name": "Mary White"},\n        { "age": 26, "name": "Alex Jones"},\n        { "age": 19, "name": "Lisa Smith"}\n    ]\n}\n')])])]),t("p",[e._v("这个文档会像我们之前描述的那样被扁平化处理，结果如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "followers.age":    [19, 26, 35],\n    "followers.name":   [alex, jones, lisa, smith, mary, white]\n}\n')])])]),t("p",[t("code",[e._v("{age: 35}")]),e._v(" 和 "),t("code",[e._v("{name: Mary White}")]),e._v(" 之间的相关性已经丢失了，不能回答这样的问题：“是否有一个26岁 "),t("em",[e._v("名字叫 Alex Jones")]),e._v(" 的followers？”")]),e._v(" "),t("p",[e._v("ES提供了一种"),t("em",[e._v("nested")]),e._v(" 对象来解决该问题。")]),e._v(" "),t("h3",{attrs:{id:"_1-7-请求体查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-请求体查询"}},[e._v("#")]),e._v(" 1.7 请求体查询")]),e._v(" "),t("h4",{attrs:{id:"_1-7-1-空查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-1-空查询"}},[e._v("#")]),e._v(" 1.7.1 空查询")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("curl -XGET \"http://172.16.20.64:39200/my_index/_search\" -H 'Content-Type: application/json' -d'\n{}'\n")])])]),t("p",[e._v("使用 "),t("code",[e._v("from")]),e._v(" 和 "),t("code",[e._v("size")]),e._v(" 参数来分页：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('GET /my_index/_search\n{\n  "from": 1,\n  "size": 10\n}\n')])])]),t("blockquote",[t("p",[t("strong",[e._v("一个带请求体的 GET 请求？")])]),e._v(" "),t("p",[e._v("某些特定语言（特别是 JavaScript）的 HTTP 库是不允许 "),t("code",[e._v("GET")]),e._v(" 请求带有请求体的。 事实上，一些使用者对于 "),t("code",[e._v("GET")]),e._v(" 请求可以带请求体感到非常的吃惊。")]),e._v(" "),t("p",[e._v("而事实是这个RFC文档 "),t("a",{attrs:{href:"http://tools.ietf.org/html/rfc7231#page-24",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC 7231"),t("OutboundLink")],1),e._v("— 一个专门负责处理 HTTP 语义和内容的文档 — 并没有规定一个带有请求体的 "),t("code",[e._v("GET")]),e._v(" 请求应该如何处理！结果是，一些 HTTP 服务器允许这样子，而有一些 — 特别是一些用于缓存和代理的服务器 — 则不允许。")]),e._v(" "),t("p",[e._v("对于一个查询请求，Elasticsearch 的工程师偏向于使用 "),t("code",[e._v("GET")]),e._v(" 方式，因为他们觉得它比 "),t("code",[e._v("POST")]),e._v(" 能更好的描述信息检索（retrieving information）的行为。然而，因为带请求体的 "),t("code",[e._v("GET")]),e._v(" 请求并不被广泛支持，所以 "),t("code",[e._v("search")]),e._v(" API 同时支持 "),t("code",[e._v("POST")]),e._v(" 请求：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('POST /_search\n{\n  "from": 30,\n  "size": 10\n}\n')])])]),t("p",[e._v("类似的规则可以应用于任何需要带请求体的 "),t("code",[e._v("GET")]),e._v(" API。")])]),e._v(" "),t("h4",{attrs:{id:"_1-7-2-查询表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-2-查询表达式"}},[e._v("#")]),e._v(" 1.7.2 查询表达式")]),e._v(" "),t("p",[e._v("查询表达式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('GET /_search\n{\n    "query": YOUR_QUERY_HERE\n}\n')])])]),t("p",[t("em",[e._v("空查询（empty search）")]),e._v(" —"),t("code",[e._v("{}")]),e._v("— 在功能上等价于使用 "),t("code",[e._v("match_all")]),e._v(" 查询， 正如其名字一样，匹配所有文档：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/_search" -H \'Content-Type: application/json\' -d\'\n{\n    "query": {\n        "match_all": {}\n    }\n}\n\'\n')])])]),t("p",[t("strong",[e._v("查询语句的结构")])]),e._v(" "),t("p",[e._v("一个查询语句 的典型结构：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n    QUERY_NAME: {\n        ARGUMENT: VALUE,\n        ARGUMENT: VALUE,...\n    }\n}\n")])])]),t("p",[e._v("如果是针对某个字段，那么它的结构如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n    QUERY_NAME: {\n        FIELD_NAME: {\n            ARGUMENT: VALUE,\n            ARGUMENT: VALUE,...\n        }\n    }\n}\n")])])]),t("p",[e._v("举个例子，你可以使用 "),t("code",[e._v("match")]),e._v(" 查询语句 来查询 "),t("code",[e._v("tweet")]),e._v(" 字段中包含 "),t("code",[e._v("elasticsearch")]),e._v(" 的 tweet：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "match": {\n        "tweet": "elasticsearch"\n    }\n}\n')])])]),t("p",[e._v("完整的查询请求如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/_search" -H \'Content-Type: application/json\' -d\'\n{\n    "query": {\n        "match": {\n            "tweet": "elasticsearch"\n        }\n    }\n}\n\'\n')])])]),t("p",[t("strong",[e._v("合并查询语句")])]),e._v(" "),t("p",[t("em",[e._v("查询语句(Query clauses)")]),e._v(" 就像一些简单的组合块 ，这些组合块可以彼此之间合并组成更复杂的查询。这些语句可以是如下形式：")]),e._v(" "),t("ul",[t("li",[t("em",[e._v("叶子语句（Leaf clauses）")]),e._v(" (就像 "),t("code",[e._v("match")]),e._v(" 语句) 被用于将查询字符串和一个字段（或者多个字段）对比。")]),e._v(" "),t("li",[t("em",[e._v("复合(Compound)")]),e._v(" 语句 主要用于 合并其它查询语句。 比如，一个 "),t("code",[e._v("bool")]),e._v(" 语句 允许在你需要的时候组合其它语句，无论是 "),t("code",[e._v("must")]),e._v(" 匹配、 "),t("code",[e._v("must_not")]),e._v(" 匹配还是 "),t("code",[e._v("should")]),e._v(" 匹配，同时它可以包含不评分的过滤器（filters）：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "bool": {\n        "must":     { "match": { "tweet": "elasticsearch" }},\n        "must_not": { "match": { "name":  "mary" }},\n        "should":   { "match": { "tweet": "full text" }},\n        "filter":   { "range": { "age" : { "gt" : 30 }} }\n    }\n}\n')])])]),t("p",[e._v("一条复合语句可以合并任何其它查询语句，包括复合语句，了解这一点是很重要的。这就意味着，复合语句之间可以互相嵌套，可以表达非常复杂的逻辑。")]),e._v(" "),t("p",[e._v("例如，以下查询是为了找出信件正文包含 business opportunity 的星标邮件，或者在收件箱正文包含 business opportunity 的非垃圾邮件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "bool": {\n        "must": { "match":   { "email": "business opportunity" }},\n        "should": [\n            { "match":       { "starred": true }},\n            { "bool": {\n                "must":      { "match": { "folder": "inbox" }},\n                "must_not":  { "match": { "spam": true }}\n            }}\n        ],\n        "minimum_should_match": 1\n    }\n}\n')])])]),t("p",[e._v("到目前为止，你不必太在意这个例子的细节，我们会在后面详细解释。最重要的是你要理解到，一条复合语句可以将多条语句 — 叶子语句和其它复合语句 — 合并成一个单一的查询语句。")]),e._v(" "),t("h4",{attrs:{id:"_1-7-3-查询和过滤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-3-查询和过滤"}},[e._v("#")]),e._v(" 1.7.3 查询和过滤")]),e._v(" "),t("p",[e._v("这部分啰里啰嗦，没啥好记录的。")]),e._v(" "),t("h4",{attrs:{id:"_1-7-4-常用查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-4-常用查询"}},[e._v("#")]),e._v(" 1.7.4 常用查询")]),e._v(" "),t("p",[t("strong",[e._v("match查询")])]),e._v(" "),t("p",[e._v("无论你在任何字段上进行的是全文搜索还是精确查询，"),t("code",[e._v("match")]),e._v(" 查询是你可用的标准查询。")]),e._v(" "),t("p",[e._v("如果你在一个全文字段上使用 "),t("code",[e._v("match")]),e._v(" 查询，在执行查询前，它将用正确的分析器去分析查询字符串：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{ "match": { "tweet": "About Search" }}\n')])])]),t("p",[e._v("如果在一个精确值的字段上使用它， 例如数字、日期、布尔或者一个 "),t("code",[e._v("keyword")]),e._v(" 字符串字段，那么它将会精确匹配给定的值：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{ "match": { "age":    26           }}\n{ "match": { "date":   "2014-09-01" }}\n{ "match": { "public": true         }}\n{ "match": { "tag":    "full_text"  }}\n')])])]),t("p",[e._v("不像我们在"),t("em",[e._v("轻量")]),e._v(" 搜索章节介绍的字符串查询（query-string search）， "),t("code",[e._v("match")]),e._v(" 查询不使用类似 "),t("code",[e._v("+user_id:2 +tweet:search")]),e._v(" 的查询语法。这就意味着将查询字段暴露给你的用户是安全的.")]),e._v(" "),t("p",[t("strong",[e._v("multi_match 查询")])]),e._v(" "),t("p",[t("code",[e._v("multi_match")]),e._v(" 查询可以在多个字段上执行相同的 "),t("code",[e._v("match")]),e._v(" 查询，例如在"),t("code",[e._v("title")]),e._v("字段和"),t("code",[e._v("body")]),e._v("字段上查询：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "multi_match": {\n        "query":    "full text search",\n        "fields":   [ "title", "body" ]\n    }\n}\n')])])]),t("p",[t("strong",[e._v("range查询")])]),e._v(" "),t("p",[t("code",[e._v("range")]),e._v(" 查询找出那些落在指定区间内的数字或者时间：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "range": {\n        "age": {\n            "gte":  20,\n            "lt":   30\n        }\n    }\n}\n')])])]),t("p",[t("strong",[e._v("term查询")])]),e._v(" "),t("p",[t("code",[e._v("term")]),e._v(" 查询被用于精确值匹配，这些精确值可能是数字、时间、布尔或者那些 keyword类型的字符串：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{ "term": { "age":    26           }}\n{ "term": { "date":   "2014-09-01" }}\n{ "term": { "public": true         }}\n{ "term": { "tag":    "full_text"  }}\n')])])]),t("p",[t("code",[e._v("term")]),e._v(" 查询对于输入的文本不 "),t("em",[e._v("分析")]),e._v(" ，所以它将给定的值进行精确查询。")]),e._v(" "),t("p",[t("strong",[e._v("terms查询")])]),e._v(" "),t("p",[t("code",[e._v("terms")]),e._v(" 查询和 "),t("code",[e._v("term")]),e._v(" 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{ "terms": { "tag": [ "search", "full_text", "nosql" ] }}\n')])])]),t("p",[t("strong",[e._v("exists查询和missing查询")])]),e._v(" "),t("p",[t("code",[e._v("exists")]),e._v(" 查询和 "),t("code",[e._v("missing")]),e._v(" 查询被用于查找那些指定字段中有值 ("),t("code",[e._v("exists")]),e._v(") 或无值 ("),t("code",[e._v("missing")]),e._v(") 的文档。这与SQL中的 "),t("code",[e._v("IS_NULL")]),e._v(" ("),t("code",[e._v("missing")]),e._v(") 和 "),t("code",[e._v("NOT IS_NULL")]),e._v(" ("),t("code",[e._v("exists")]),e._v(") 在本质上具有共性：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "exists":   {\n        "field":    "title"\n    }\n}\n')])])]),t("h4",{attrs:{id:"_1-7-5-组合多查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-5-组合多查询"}},[e._v("#")]),e._v(" 1.7.5 组合多查询")]),e._v(" "),t("p",[e._v("可以用 "),t("code",[e._v("bool")]),e._v(" 查询来实现将多查询组合在一起。它接收以下参数：")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("must")])]),e._v(" "),t("p",[e._v("文档 "),t("em",[e._v("必须")]),e._v(" 匹配这些条件才能被包含进来。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("must_not")])]),e._v(" "),t("p",[e._v("文档 "),t("em",[e._v("必须不")]),e._v(" 匹配这些条件才能被包含进来。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("should")])]),e._v(" "),t("p",[e._v("如果满足这些语句中的任意语句，将增加 "),t("code",[e._v("_score")]),e._v(" ，否则，无任何影响。它们主要用于修正每个文档的相关性得分。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("filter")])]),e._v(" "),t("p",[t("em",[e._v("必须")]),e._v(" 匹配，但它以不评分、过滤模式来进行。这些语句对评分没有贡献，只是根据过滤标准来排除或包含文档。")])])]),e._v(" "),t("p",[e._v("由于这是我们看到的第一个包含多个查询的查询，所以有必要讨论一下相关性得分是如何组合的。每一个子查询都独自地计算文档的相关性得分。一旦他们的得分被计算出来， "),t("code",[e._v("bool")]),e._v(" 查询就将这些得分进行合并并且返回一个代表整个布尔操作的得分。")]),e._v(" "),t("p",[e._v("下面的查询用于查找 "),t("code",[e._v("title")]),e._v(" 字段匹配 "),t("code",[e._v("how to make millions")]),e._v(" 并且不被标识为 "),t("code",[e._v("spam")]),e._v(" 的文档。那些被标识为 "),t("code",[e._v("starred")]),e._v(" 或在2014之后的文档，将比另外那些文档拥有更高的排名。如果 "),t("em",[e._v("两者")]),e._v(" 都满足，那么它排名将更高：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "bool": {\n        "must":     { "match": { "title": "how to make millions" }},\n        "must_not": { "match": { "tag":   "spam" }},\n        "should": [\n            { "match": { "tag": "starred" }},\n            { "range": { "date": { "gte": "2014-01-01" }}}\n        ]\n    }\n}\n')])])]),t("p",[t("em",[e._v("如果没有 "),t("code",[e._v("must")]),e._v(" 语句，那么至少需要能够匹配其中的一条 "),t("code",[e._v("should")]),e._v(" 语句。但，如果存在至少一条 "),t("code",[e._v("must")]),e._v(" 语句，则对 "),t("code",[e._v("should")]),e._v(" 语句的匹配没有要求。")])]),e._v(" "),t("p",[t("strong",[e._v("带过滤器的查询")])]),e._v(" "),t("p",[e._v("如果我们不想因为文档的时间而影响得分，可以用 "),t("code",[e._v("filter")]),e._v(" 语句来重写前面的例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "bool": {\n        "must":     { "match": { "title": "how to make millions" }},\n        "must_not": { "match": { "tag":   "spam" }},\n        "should": [\n            { "match": { "tag": "starred" }}\n        ],\n        "filter": {\n          "range": { "date": { "gte": "2014-01-01" }} \n        }\n    }\n}\n')])])]),t("p",[e._v("如果你需要通过多个不同的标准来过滤你的文档，"),t("code",[e._v("bool")]),e._v(" 查询本身也可以被用做不评分的查询。简单地将它放置到 "),t("code",[e._v("filter")]),e._v(" 语句中并在内部构建布尔逻辑：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "bool": {\n        "must":     { "match": { "title": "how to make millions" }},\n        "must_not": { "match": { "tag":   "spam" }},\n        "should": [\n            { "match": { "tag": "starred" }}\n        ],\n        "filter": {\n          "bool": { \n              "must": [\n                  { "range": { "date": { "gte": "2014-01-01" }}},\n                  { "range": { "price": { "lte": 29.99 }}}\n              ],\n              "must_not": [\n                  { "term": { "category": "ebooks" }}\n              ]\n          }\n        }\n    }\n}\n')])])]),t("p",[t("strong",[e._v("constant_score 查询")])]),e._v(" "),t("p",[t("code",[e._v("constant_score")]),e._v(" 查询将一个不变的常量评分应用于所有匹配的文档。它被经常用于你只需要执行一个 filter 而没有其它查询（例如，评分查询）的情况下。")]),e._v(" "),t("p",[e._v("可以使用它来取代只有 filter 语句的 "),t("code",[e._v("bool")]),e._v(" 查询。在性能上是完全相同的，但对于提高查询简洁性和清晰度有很大帮助。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "constant_score":   {\n        "filter": {\n            "term": { "category": "ebooks" } \n        }\n    }\n}\n')])])]),t("p",[t("strong",[e._v("验证查询")])]),e._v(" "),t("p",[e._v("查询可以变得非常的复杂，尤其 和不同的分析器与不同的字段映射结合时，理解起来就有点困难了。不过 "),t("code",[e._v("validate-query")]),e._v(" API 可以用来验证查询是否合法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/gb/tweet/_validate/query" -H \'Content-Type: application/json\' -d\'\n{\n   "query": {\n      "tweet" : {\n         "match" : "really powerful"\n      }\n   }\n}\n\'\n')])])]),t("p",[e._v("以上 "),t("code",[e._v("validate")]),e._v(" 请求的应答告诉我们这个查询是不合法的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "valid" :         false,\n  "_shards" : {\n    "total" :       1,\n    "successful" :  1,\n    "failed" :      0\n  }\n}\n')])])]),t("p",[t("strong",[e._v("理解错误信息")])]),e._v(" "),t("p",[e._v("为了找出查询不合法的原因，可以将 "),t("code",[e._v("explain")]),e._v(" 参数 加到查询字符串中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/gb/tweet/_validate/query?explain" -H \'Content-Type: application/json\' -d\'\n{\n   "query": {\n      "tweet" : {\n         "match" : "really powerful"\n      }\n   }\n}\n\'\n')])])]),t("p",[e._v("返回了错误详情")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "valid": false,\n  "error": "org.elasticsearch.common.ParsingException: no [query] registered for [tweet]"\n}\n')])])]),t("p",[t("strong",[e._v("理解查询语句")])]),e._v(" "),t("p",[e._v("对于合法查询，使用 "),t("code",[e._v("explain")]),e._v(" 参数将返回可读的描述，这对准确理解 Elasticsearch 是如何解析你的 query 是非常有用的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -XGET "http://172.16.20.64:39200/_validate/query?explain" -H \'Content-Type: application/json\' -d\'\n{\n  "query": {\n    "match": {\n      "tweet": "really powerful"\n    }\n  }\n}\'\n')])])]),t("p",[e._v("返回结果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "_shards": {\n    "total": 1,\n    "successful": 1,\n    "failed": 0\n  },\n  "valid": true,\n  "explanations": [\n    {\n      "index": "gb",\n      "valid": true,\n      "explanation": "+(tweet:really tweet:powerful) #*:*"\n    }\n  ]\n}\n')])])]),t("h2",{attrs:{id:"_2、深入搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、深入搜索"}},[e._v("#")]),e._v(" 2、深入搜索")]),e._v(" "),t("h3",{attrs:{id:"_2-1-结构化搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-结构化搜索"}},[e._v("#")]),e._v(" 2.1 结构化搜索")]),e._v(" "),t("h4",{attrs:{id:"_2-1-2-组合过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-组合过滤器"}},[e._v("#")]),e._v(" 2.1.2 组合过滤器")]),e._v(" "),t("p",[e._v("书中的代码")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('GET /my_store/products/_search\n{\n   "query" : {\n      "filtered" : { \n         "filter" : {\n            "bool" : {\n              "should" : [\n                 { "term" : {"price" : 20}}, \n                 { "term" : {"productID" : "XHDK-A-1293-#fJ3"}} \n              ],\n              "must_not" : {\n                 "term" : {"price" : 30} \n              }\n           }\n         }\n      }\n   }\n}\n')])])]),t("p",[e._v("执行起来应该会报错，因为官网已经没有filtered了，官网的代码")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('GET /_search\n{\n  "query": { \n    "bool": { \n      "must": [\n        { "match": { "title":   "Search"        }}, \n        { "match": { "content": "Elasticsearch" }}  \n      ],\n      "filter": [ \n        { "term":  { "status": "published" }}, \n        { "range": { "publish_date": { "gte": "2015-01-01" }}} \n      ]\n    }\n  }\n}\n')])])]),t("p",[t("strong",[e._v("filter的上一层是bool，不是filtered")])]),e._v(" "),t("h3",{attrs:{id:"_2-5-部分匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-部分匹配"}},[e._v("#")]),e._v(" 2.5 部分匹配")]),e._v(" "),t("h4",{attrs:{id:"_2-5-1-邮编和结构化数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-邮编和结构化数据"}},[e._v("#")]),e._v(" 2.5.1 邮编和结构化数据")]),e._v(" "),t("p",[e._v("我们会使用美国目前使用的邮编形式（United Kingdom postcodes 标准）来说明如何用部分匹配查询结构化数据。 这种邮编形式有很好的结构定义。例如，邮编 "),t("code",[e._v("W1V 3DG")]),e._v(" 可以分解成如下形式：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("W1V")]),e._v(" ：这是邮编的外部，它定义了邮件的区域和行政区：\n"),t("ul",[t("li",[t("code",[e._v("W")]),e._v(" 代表区域（ 1 或 2 个字母）")]),e._v(" "),t("li",[t("code",[e._v("1V")]),e._v(" 代表行政区（ 1 或 2 个数字，可能跟着一个字符）")])])]),e._v(" "),t("li",[t("code",[e._v("3DG")]),e._v(" ：内部定义了街道或建筑：\n"),t("ul",[t("li",[t("code",[e._v("3")]),e._v(" 代表街区区块（ 1 个数字）")]),e._v(" "),t("li",[t("code",[e._v("DG")]),e._v(" 代表单元（ 2 个字母）")])])])]),e._v(" "),t("p",[e._v("假设将邮编作为精确值字段索引，所以可以为其创建索引，如下（脚本与书中略有不同，针对当前ES版本做了修改，拓展阅读"),t("a",{attrs:{href:"https://blog.csdn.net/u010825931/article/details/80916399",target:"_blank",rel:"noopener noreferrer"}},[e._v("Elasticsearch 6.x 和 5.x 字符串类型的差别"),t("OutboundLink")],1),e._v("）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('PUT /postcodes_test\n{\n    "mappings": {\n        "address": {\n            "properties": {\n                "postcode": {\n                    "type":  "keyword"\n                }\n            }\n        }\n    }\n}\n')])])]),t("p",[e._v("然后索引一些邮编作为测试数据：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('PUT /postcodes_test/address/1\n{ "postcode": "W1V 3DG" }\n\nPUT /postcodes_test/address/2\n{ "postcode": "W2F 8HW" }\n\nPUT /postcodes_test/address/3\n{ "postcode": "W1F 7HW" }\n\nPUT /postcodes_test/address/4\n{ "postcode": "WC1N 1LZ" }\n\nPUT /postcodes_test/address/5\n{ "postcode": "SW5 0BE" }\n')])])]),t("h4",{attrs:{id:"_2-5-2-prefix前缀查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-prefix前缀查询"}},[e._v("#")]),e._v(" 2.5.2 prefix前缀查询")]),e._v(" "),t("p",[e._v("为了找到所有以 "),t("code",[e._v("W1")]),e._v(" 开始的邮编，可以使用简单的 "),t("code",[e._v("prefix")]),e._v(" 查询：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('GET /postcodes_test/address/_search\n{\n    "query": {\n        "prefix": {\n            "postcode": "W1"\n        }\n    }\n}\n')])])]),t("p",[t("code",[e._v("prefix")]),e._v(" 查询是一个词级别的底层的查询，它不会在搜索之前分析查询字符串，它假定传入前缀就正是要查找的前缀。")]),e._v(" "),t("p",[e._v("如果倒排索引中有数以百万的邮编都是以 "),t("code",[e._v("W1")]),e._v(" 开头时，前缀查询则需要访问每个词然后计算结果！")]),e._v(" "),t("p",[e._v("前缀越短所需访问的词越多。如果我们要以 "),t("code",[e._v("W")]),e._v(" 作为前缀而不是 "),t("code",[e._v("W1")]),e._v(" ，那么就可能需要做千万次的匹配。")]),e._v(" "),t("p",[e._v("本章后面会介绍另一个索引时的解决方案，这个方案能使前缀匹配更高效，不过在此之前，需要先看看两个相关的查询： "),t("code",[e._v("wildcard")]),e._v(" 和 "),t("code",[e._v("regexp")]),e._v(" （通配符和正则）。")]),e._v(" "),t("h4",{attrs:{id:"_2-5-3-通配符和正则表达式查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-3-通配符和正则表达式查询"}},[e._v("#")]),e._v(" 2.5.3 通配符和正则表达式查询")]),e._v(" "),t("p",[e._v("与 "),t("code",[e._v("prefix")]),e._v(" 前缀查询的特性类似， "),t("code",[e._v("wildcard")]),e._v(" 通配符查询也是一种底层基于词的查询， 与前缀查询不同的是它允许指定匹配的正则式。它使用标准的 shell 通配符查询： "),t("code",[e._v("?")]),e._v(" 匹配任意字符， "),t("code",[e._v("*")]),e._v(" 匹配 0 或多个字符。")]),e._v(" "),t("p",[e._v("这个查询会匹配包含 "),t("code",[e._v("W1F 7HW")]),e._v(" 和 "),t("code",[e._v("W2F 8HW")]),e._v(" 的文档：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/postcodes_test/address/_search" -H \'Content-Type: application/json\' -d\'\n{\n    "query": {\n        "wildcard": {\n            "postcode": "W?F*HW" \n        }\n    }\n}\n\'\n')])])]),t("p",[e._v("如果想匹配只以 "),t("code",[e._v("W")]),e._v(" 开始并跟随一个数字的所有邮编， "),t("code",[e._v("regexp")]),e._v(" 正则式查询允许写出这样更复杂的模式：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/postcodes_test/address/_search" -H \'Content-Type: application/json\' -d\'\n{\n    "query": {\n        "regexp": {\n            "postcode": "W[0-9].+" \n        }\n    }\n}\n\'\n')])])]),t("p",[t("code",[e._v("wildcard")]),e._v(" 和 "),t("code",[e._v("regexp")]),e._v(" 查询的工作方式与 "),t("code",[e._v("prefix")]),e._v(" 查询完全一样，它们也需要扫描倒排索引中的词列表才能找到所有匹配的词，然后依次获取每个词相关的文档 ID ，与 "),t("code",[e._v("prefix")]),e._v(" 查询的唯一不同是：它们能支持更为复杂的匹配模式。")]),e._v(" "),t("p",[e._v("这也意味着需要同样注意前缀查询存在性能问题，对有很多唯一词的字段执行这些查询可能会消耗非常多的资源，所以要避免使用左通配这样的模式匹配（如： "),t("code",[e._v("*foo")]),e._v(" 或 "),t("code",[e._v(".*foo")]),e._v(" 这样的正则式）。")]),e._v(" "),t("p",[e._v("数据在索引时的预处理有助于提高前缀匹配的效率，而通配符和正则表达式查询只能在查询时完成，尽管这些查询有其应用场景，但使用仍需谨慎。")]),e._v(" "),t("p",[t("code",[e._v("prefix")]),e._v(" 、 "),t("code",[e._v("wildcard")]),e._v(" 和 "),t("code",[e._v("regexp")]),e._v(" 查询是基于词操作的，如果用它们来查询 "),t("code",[e._v("text")]),e._v(" 字段，它们会检查字段里面的每个词，而不是将字段作为整体来处理。")]),e._v(" "),t("p",[e._v("比方说包含 “Quick brown fox” （快速的棕色狐狸）的 "),t("code",[e._v("title")]),e._v(" 字段会生成词： "),t("code",[e._v("quick")]),e._v(" 、 "),t("code",[e._v("brown")]),e._v(" 和 "),t("code",[e._v("fox")]),e._v(" 。")]),e._v(" "),t("p",[e._v("会匹配以下这个查询：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{ "regexp": { "title": "br.*" }}\n')])])]),t("p",[e._v("但是不会匹配以下两个查询：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{ "regexp": { "title": "Qu.*" }} \n{ "regexp": { "title": "quick br*" }} \n')])])]),t("h4",{attrs:{id:"_2-5-4-输入即搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-4-输入即搜索"}},[e._v("#")]),e._v(" 2.5.4 输入即搜索")]),e._v(" "),t("p",[e._v("在 "),t("a",{attrs:{href:"https://www.elastic.co/guide/cn/elasticsearch/guide/current/phrase-matching.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("短语匹配"),t("OutboundLink")],1),e._v(" 中，我们引入了 "),t("code",[e._v("match_phrase")]),e._v(" 短语匹配查询，它匹配相对顺序一致的所有指定词语，对于查询时的输入即搜索，可以使用 "),t("code",[e._v("match_phrase")]),e._v(" 的一种特殊形式， "),t("code",[e._v("match_phrase_prefix")]),e._v(" 查询：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "match_phrase_prefix" : {\n        "brand" : "johnnie walker bl"\n    }\n}\n')])])]),t("p",[e._v("这种查询的行为与 "),t("code",[e._v("match_phrase")]),e._v(" 查询一致，不同的是它将查询字符串的最后一个词作为前缀使用，换句话说，可以将之前的例子看成如下这样：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("johnnie")])]),e._v(" "),t("li",[e._v("跟着 "),t("code",[e._v("walker")])]),e._v(" "),t("li",[e._v("跟着以 "),t("code",[e._v("bl")]),e._v(" 开始的词")])]),e._v(" "),t("p",[e._v("如果通过 "),t("code",[e._v("validate-query")]),e._v(" API 运行这个查询查询，explanation 的解释结果为：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"johnnie walker bl*"\n')])])]),t("p",[e._v("与 "),t("code",[e._v("match_phrase")]),e._v(" 一样，它也可以接受 "),t("code",[e._v("slop")]),e._v(" 参数（参照 "),t("a",{attrs:{href:"https://www.elastic.co/guide/cn/elasticsearch/guide/current/slop.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("slop"),t("OutboundLink")],1),e._v(" ）让相对词序位置不那么严格：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "match_phrase_prefix" : {\n        "brand" : {\n            "query": "walker johnnie bl", \n            "slop":  10\n        }\n    }\n}\n')])])]),t("p",[e._v("尽管词语顺序不正确，查询仍然能匹配，因为我们为它设置了足够高的 "),t("code",[e._v("slop")]),e._v(" 值使匹配时的词序有更大灵活性。\n但是只有查询字符串的最后一个词才能当作前缀使用。\n在之前的 "),t("a",{attrs:{href:"https://www.elastic.co/guide/cn/elasticsearch/guide/current/prefix-query.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("前缀查询"),t("OutboundLink")],1),e._v(" 中，我们警告过使用前缀的风险，即 "),t("code",[e._v("prefix")]),e._v(" 查询存在严重的资源消耗问题，短语查询的这种方式也同样如此。 前缀 "),t("code",[e._v("a")]),e._v(" 可能会匹配成千上万的词，这不仅会消耗很多系统资源，而且结果的用处也不大。\n可以通过设置 "),t("code",[e._v("max_expansions")]),e._v(" 参数来限制前缀扩展的影响， 一个合理的值是可能是 50 ：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "match_phrase_prefix" : {\n        "brand" : {\n            "query":          "johnnie walker bl",\n            "max_expansions": 50\n        }\n    }\n}\n')])])]),t("h4",{attrs:{id:"_2-5-5-索引时优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-5-索引时优化"}},[e._v("#")]),e._v(" 2.5.5 索引时优化")]),e._v(" "),t("p",[e._v("可以通过在索引时处理数据提高搜索的灵活性以及提升系统性能。为此仍然需要付出应有的代价：增加的索引空间与变慢的索引能力，但这与每次查询都需要付出代价不同，索引时的代价只用付出一次。")]),e._v(" "),t("p",[t("em",[e._v("n-grams")]),e._v("是一个在词语上的滑动窗口 ， n 代表这个 “窗口” 的长度。")]),e._v(" "),t("p",[e._v("如果我们要 n-gram "),t("code",[e._v("quick")]),e._v(" 这个词 —— 它的结果取决于 "),t("em",[e._v("n")]),e._v(" 的选择长度：")]),e._v(" "),t("ul",[t("li",[e._v("长度 1（unigram）： [ "),t("code",[e._v("q")]),e._v(", "),t("code",[e._v("u")]),e._v(", "),t("code",[e._v("i")]),e._v(", "),t("code",[e._v("c")]),e._v(", "),t("code",[e._v("k")]),e._v(" ]")]),e._v(" "),t("li",[e._v("长度 2（bigram）： [ "),t("code",[e._v("qu")]),e._v(", "),t("code",[e._v("ui")]),e._v(", "),t("code",[e._v("ic")]),e._v(", "),t("code",[e._v("ck")]),e._v(" ]")]),e._v(" "),t("li",[e._v("长度 3（trigram）： [ "),t("code",[e._v("qui")]),e._v(", "),t("code",[e._v("uic")]),e._v(", "),t("code",[e._v("ick")]),e._v(" ]")]),e._v(" "),t("li",[e._v("长度 4（four-gram）： [ "),t("code",[e._v("quic")]),e._v(", "),t("code",[e._v("uick")]),e._v(" ]")]),e._v(" "),t("li",[e._v("长度 5（five-gram）： [ "),t("code",[e._v("quick")]),e._v(" ]")])]),e._v(" "),t("p",[e._v("朴素的 n-gram 对 "),t("em",[e._v("词语内部的匹配")]),e._v(" 非常有用，即在 "),t("a",{attrs:{href:"https://www.elastic.co/guide/cn/elasticsearch/guide/current/ngrams-compound-words.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ngram 匹配复合词"),t("OutboundLink")],1),e._v(" 介绍的那样。但对于输入即搜索（search-as-you-type）这种应用场景，我们会使用一种特殊的 n-gram 称为 "),t("em",[e._v("边界 n-grams")]),e._v(" （edge n-grams）。所谓的边界 n-gram 是说它会固定词语开始的一边，以单词 "),t("code",[e._v("quick")]),e._v(" 为例，它的边界 n-gram 的结果为：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("q")])]),e._v(" "),t("li",[t("code",[e._v("qu")])]),e._v(" "),t("li",[t("code",[e._v("qui")])]),e._v(" "),t("li",[t("code",[e._v("quic")])]),e._v(" "),t("li",[t("code",[e._v("quick")])])]),e._v(" "),t("p",[e._v("可能会注意到这与用户在搜索时输入 “quick” 的字母次序是一致的，换句话说，这种方式正好满足即时搜索（instant search）！")]),e._v(" "),t("h4",{attrs:{id:"_2-5-6-索引时输入即搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-6-索引时输入即搜索"}},[e._v("#")]),e._v(" 2.5.6 索引时输入即搜索")]),e._v(" "),t("p",[t("strong",[e._v("准备索引")])]),e._v(" "),t("p",[e._v("第一步需要配置一个自定义的 "),t("code",[e._v("edge_ngram")]),e._v(" token 过滤器，称为 "),t("code",[e._v("autocomplete_filter")]),e._v(" ：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "filter": {\n        "autocomplete_filter": {\n            "type":     "edge_ngram",\n            "min_gram": 1,\n            "max_gram": 20\n        }\n    }\n}\n')])])]),t("p",[e._v("这个配置的意思是：对于这个 token 过滤器接收的任意词项，过滤器会为之生成一个最小固定值为 1 ，最大为 20 的 n-gram 。")]),e._v(" "),t("p",[e._v("然后会在一个自定义分析器 "),t("code",[e._v("autocomplete")]),e._v(" 中使用上面这个 token 过滤器：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "analyzer": {\n        "autocomplete": {\n            "type":      "custom",\n            "tokenizer": "standard",\n            "filter": [\n                "lowercase",\n                "autocomplete_filter" \n            ]\n        }\n    }\n}\n')])])]),t("p",[e._v("这个分析器使用 "),t("code",[e._v("standard")]),e._v(" 分词器将字符串拆分为独立的词，并且将它们都变成小写形式，然后为每个词生成一个边界 n-gram，这要感谢 "),t("code",[e._v("autocomplete_filter")]),e._v(" 起的作用。")]),e._v(" "),t("p",[e._v("创建索引、实例化 token 过滤器和分析器的完整示例如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X PUT "localhost:9200/my_index" -H \'Content-Type: application/json\' -d\'\n{\n    "settings": {\n        "number_of_shards": 1, \n        "analysis": {\n            "filter": {\n                "autocomplete_filter": { \n                    "type":     "edge_ngram",\n                    "min_gram": 1,\n                    "max_gram": 20\n                }\n            },\n            "analyzer": {\n                "autocomplete": {\n                    "type":      "custom",\n                    "tokenizer": "standard",\n                    "filter": [\n                        "lowercase",\n                        "autocomplete_filter" \n                    ]\n                }\n            }\n        }\n    }\n}\n\'\n')])])]),t("p",[e._v("可以拿 "),t("code",[e._v("analyze")]),e._v(" API 测试这个新的分析器确保它行为正确：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -XGET "http://172.16.20.64:39200/my_index/_analyze" -H \'Content-Type: application/json\' -d\'\n{\n  "analyzer": "autocomplete",\n  "text": "quick brown"\n}\'\n')])])]),t("p",[e._v("结果表明分析器能正确工作，并返回以下词：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("q")])]),e._v(" "),t("li",[t("code",[e._v("qu")])]),e._v(" "),t("li",[t("code",[e._v("qui")])]),e._v(" "),t("li",[t("code",[e._v("quic")])]),e._v(" "),t("li",[t("code",[e._v("quick")])]),e._v(" "),t("li",[t("code",[e._v("b")])]),e._v(" "),t("li",[t("code",[e._v("br")])]),e._v(" "),t("li",[t("code",[e._v("bro")])]),e._v(" "),t("li",[t("code",[e._v("brow")])]),e._v(" "),t("li",[t("code",[e._v("brown")])])]),e._v(" "),t("p",[e._v("可以用 "),t("code",[e._v("update-mapping")]),e._v(" API 将这个分析器应用到具体字段：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X PUT "localhost:9200/my_index/_mapping/my_type" -H \'Content-Type: application/json\' -d\'\n{\n    "my_type": {\n        "properties": {\n            "name": {\n                "type":     "text",\n                "analyzer": "autocomplete"\n            }\n        }\n    }\n}\n\'\n')])])]),t("p",[e._v("创建一些测试文档")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X POST "localhost:9200/my_index/my_type/_bulk" -H \'Content-Type: application/json\' -d\'\n{ "index": { "_id": 1            }}\n{ "name": "Brown foxes"    }\n{ "index": { "_id": 2            }}\n{ "name": "Yellow furballs" }\n\'\n')])])]),t("p",[e._v("如果使用简单 "),t("code",[e._v("match")]),e._v(" 查询测试查询 “brown fo” ：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/my_index/my_type/_search" -H \'Content-Type: application/json\' -d\'\n{\n    "query": {\n        "match": {\n            "name": "brown fo"\n        }\n    }\n}\n\'\n')])])]),t("p",[e._v("结果是两个文档同时都能匹配，尽管 Yellow furballs 这个文档并不包含 brown 和 fo 。")]),e._v(" "),t("p",[e._v("如往常一样， "),t("code",[e._v("validate-query")]),e._v(" API 总能提供一些线索：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/my_index/my_type/_validate/query?explain" -H \'Content-Type: application/json\' -d\'\n{\n    "query": {\n        "match": {\n            "name": "brown fo"\n        }\n    }\n}\n\'\n')])])]),t("p",[t("code",[e._v("explanation")]),e._v(" 表明查询会查找边界 n-grams 里的每个词：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("name:b name:br name:bro name:brow name:brown name:f name:fo\n")])])]),t("p",[t("code",[e._v("name:f")]),e._v(" 条件可以满足第二个文档，因为 "),t("code",[e._v("furballs")]),e._v(" 是以 "),t("code",[e._v("f")]),e._v(" 、 "),t("code",[e._v("fu")]),e._v(" 、 "),t("code",[e._v("fur")]),e._v(" 形式索引的。回过头看这并不令人惊讶，相同的 "),t("code",[e._v("autocomplete")]),e._v(" 分析器同时被应用于索引时和搜索时，这在大多数情况下是正确的，只有在少数场景下才需要改变这种行为。")]),e._v(" "),t("p",[e._v("我们需要保证倒排索引表中包含边界 n-grams 的每个词，但是我们只想匹配用户输入的完整词组（ "),t("code",[e._v("brown")]),e._v("和 "),t("code",[e._v("fo")]),e._v(" ）， 可以通过在索引时使用 "),t("code",[e._v("autocomplete")]),e._v(" 分析器，并在搜索时使用 "),t("code",[e._v("standard")]),e._v(" 标准分析器来实现这种想法，只要改变查询使用的搜索分析器 "),t("code",[e._v("analyzer")]),e._v(" 参数即可：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X GET "localhost:9200/my_index/my_type/_search" -H \'Content-Type: application/json\' -d\'\n{\n    "query": {\n        "match": {\n            "name": {\n                "query":    "brown fo",\n                "analyzer": "standard" \n            }\n        }\n    }\n}\n\'\n')])])]),t("p",[e._v("换种方式，我们可以在映射中，为 "),t("code",[e._v("name")]),e._v(" 字段分别指定 "),t("code",[e._v("index_analyzer")]),e._v(" 和 "),t("code",[e._v("search_analyzer")]),e._v(" 。因为我们只想改变 "),t("code",[e._v("search_analyzer")]),e._v(" ，这里只要更新现有的映射而不用对数据重新创建索引：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -XPUT "http://172.16.20.64:39200/my_index/my_type/_mapping" -H \'Content-Type: application/json\' -d\'\n{\n  "my_type": {\n    "properties": {\n      "name": {\n        "type": "text",\n        "analyzer": "autocomplete",\n        "search_analyzer": "standard"\n      }\n    }\n  }\n}\'\n')])])]),t("p",[e._v("因为大多数工作是在索引时完成的，所有的查询只要查找 "),t("code",[e._v("brown")]),e._v(" 和 "),t("code",[e._v("fo")]),e._v(" 这两个词，这比使用 "),t("code",[e._v("match_phrase_prefix")]),e._v(" 查找所有以 "),t("code",[e._v("fo")]),e._v(" 开始的词的方式要高效许多。")]),e._v(" "),t("p",[t("strong",[e._v("补全提示（Completion Suggester）")])]),e._v(" "),t("blockquote",[t("p",[e._v("Elasticsearch 里的 "),t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-completion.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("completion suggester"),t("OutboundLink")],1),e._v(" 采用与上面完全不同的方式，需要为搜索条件生成一个所有可能完成的词列表，然后将它们置入一个 "),t("em",[e._v("有限状态机（finite state transducer）")]),e._v(" 内，这是个经优化的图结构。为了搜索建议提示，Elasticsearch 从图的开始处顺着匹配路径一个字符一个字符地进行匹配，一旦它处于用户输入的末尾，Elasticsearch 就会查找所有可能结束的当前路径，然后生成一个建议列表。")]),e._v(" "),t("p",[e._v("本数据结构存于内存中，能使前缀查找非常快，比任何一种基于词的查询都要快很多，这对名字或品牌的自动补全非常适用，因为这些词通常是以普通顺序组织的：用 “Johnny Rotten” 而不是 “Rotten Johnny” 。")]),e._v(" "),t("p",[e._v("当词序不是那么容易被预见时，边界 n-grams 比完成建议者（Completion Suggester）更合适。")])]),e._v(" "),t("p",[t("strong",[e._v("边界n-grams与邮编")])]),e._v(" "),t("p",[e._v("边界 n-gram 的方式可以用来查询结构化的数据， 比如本章之前示例中的邮编（postcode）。当然 "),t("code",[e._v("postcode")]),e._v(" 字段需要 text而不是keyword ，不过可以用 "),t("code",[e._v("keyword")]),e._v(" 分词器来处理它，就好像他们是 text的一样。")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("keyword")]),e._v(" 分词器是一个非操作型分词器，这个分词器不做任何事情，它接收的任何字符串都会被原样发出，因此它可以用来处理keyword的字段值，但这也需要其他的一些分析转换，如将字母转换成小写。")])]),e._v(" "),t("p",[e._v("下面示例使用 "),t("code",[e._v("keyword")]),e._v(" 分词器将邮编转换成 token 流，这样就能使用边界 n-gram token 过滤器：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -XPUT "http://172.16.20.64:39200/postcodes_test" -H \'Content-Type: application/json\' -d\'\n{\n  "settings": {\n    "number_of_shards": 1,\n    "analysis": {\n      "filter": {\n        "postcode_filter": {\n          "type": "edge_ngram",\n          "min_gram": 1,\n          "max_gram": 8\n        }\n      },\n      "analyzer": {\n        "postcode_index": {\n          "tokenizer": "keyword",\n          "filter": [\n            "postcode_filter"\n          ]\n        },\n        "postcode_search": {\n          "tokenizer": "keyword"\n        }\n      }\n    }\n  }\n}\'\n')])])]),t("h4",{attrs:{id:"_2-5-7-ngrams-在复合词的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-7-ngrams-在复合词的应用"}},[e._v("#")]),e._v(" 2.5.7 Ngrams 在复合词的应用")]),e._v(" "),t("p",[e._v("最后，来看看 n-gram 是如何应用于搜索复合词的语言中的。 德语的特点是它可以将许多小词组合成一个庞大的复合词以表达它准确或复杂的意义。例如：")]),e._v(" "),t("ul",[t("li",[t("p",[t("em",[e._v("Aussprachewörterbuch")])]),e._v(" "),t("p",[e._v("发音字典（Pronunciation dictionary）")])]),e._v(" "),t("li",[t("p",[t("em",[e._v("Militärgeschichte")])]),e._v(" "),t("p",[e._v("战争史（Military history）")])]),e._v(" "),t("li",[t("p",[t("em",[e._v("Weißkopfseeadler")])]),e._v(" "),t("p",[e._v("秃鹰（White-headed sea eagle, or bald eagle）")])]),e._v(" "),t("li",[t("p",[t("em",[e._v("Weltgesundheitsorganisation")])]),e._v(" "),t("p",[e._v("世界卫生组织（World Health Organization）")])]),e._v(" "),t("li",[t("p",[t("em",[e._v("Rindfleischetikettierungsüberwachungsaufgabenübertragungsgesetz")])]),e._v(" "),t("p",[e._v("法案考虑代理监管牛和牛肉的标记的职责（The law concerning the delegation of duties for the supervision of cattle marking and the labeling of beef）")])])]),e._v(" "),t("p",[e._v("有些人希望在搜索 “Wörterbuch”（字典）的时候，能在结果中看到 “Aussprachewörtebuch”（发音字典）。同样，搜索 “Adler”（鹰）的时候，能将 “Weißkopfseeadler”（秃鹰）包括在结果中。")]),e._v(" "),t("p",[e._v("处理这种语言的一种方式可以用 "),t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-compound-word-tokenfilter.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("组合词 token 过滤器（compound word token filter）"),t("OutboundLink")],1),e._v(" 将复合词拆分成各自部分，但这种方式的结果质量依赖于组合词字典的质量。")]),e._v(" "),t("p",[e._v("另一种方式就是将所有的词用 n-gram 进行处理，然后搜索任何匹配的片段——能匹配的片段越多，文档的相关度越大。")]),e._v(" "),t("p",[e._v("假设某个 n-gram 是一个词上的滑动窗口，那么任何长度的 n-gram 都可以遍历这个词。我们既希望选择足够长的值让拆分的词项具有意义，又不至于因为太长而生成过多的唯一词。一个长度为 3 的 "),t("em",[e._v("trigram")]),e._v(" 可能是一个不错的开始：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -X PUT "localhost:9200/my_index" -H \'Content-Type: application/json\' -d\'\n{\n    "settings": {\n        "analysis": {\n            "filter": {\n                "trigrams_filter": {\n                    "type":     "ngram",\n                    "min_gram": 3,\n                    "max_gram": 3\n                }\n            },\n            "analyzer": {\n                "trigrams": {\n                    "type":      "custom",\n                    "tokenizer": "standard",\n                    "filter":   [\n                        "lowercase",\n                        "trigrams_filter"\n                    ]\n                }\n            }\n        }\n    },\n    "mappings": {\n        "my_type": {\n            "properties": {\n                "text": {\n                    "type":     "string",\n                    "analyzer": "trigrams" \n                }\n            }\n        }\n    }\n}\n\'\n')])])]),t("p",[e._v("使用 "),t("code",[e._v("analyze")]),e._v(" API 测试 trigram 分析器：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('curl -XGET "http://172.16.20.64:39200/my_index/_analyze" -H \'Content-Type: application/json\' -d\'\n{\n  "analyzer": "trigrams",\n  "text": "Weißkopfseeadler"\n}\'\n')])])]),t("p",[e._v("返回以下词项：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("wei, eiß, ißk, ßko, kop, opf, pfs, fse, see, eea,ead, adl, dle, ler\n")])])]),t("p",[e._v("索引前述示例中的复合词来测试：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('POST /my_index/my_type/_bulk\n{ "index": { "_id": 1 }}\n{ "text": "Aussprachewörterbuch" }\n{ "index": { "_id": 2 }}\n{ "text": "Militärgeschichte" }\n{ "index": { "_id": 3 }}\n{ "text": "Weißkopfseeadler" }\n{ "index": { "_id": 4 }}\n{ "text": "Weltgesundheitsorganisation" }\n{ "index": { "_id": 5 }}\n{ "text": "Rindfleischetikettierungsüberwachungsaufgabenübertragungsgesetz" }\n')])])]),t("p",[e._v("“Adler”（鹰）的搜索转化为查询三个词 "),t("code",[e._v("adl")]),e._v(" 、 "),t("code",[e._v("dle")]),e._v(" 和 "),t("code",[e._v("ler")]),e._v(" ：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('GET /my_index/my_type/_search\n{\n    "query": {\n        "match": {\n            "text": "Adler"\n        }\n    }\n}\n')])])]),t("p",[e._v("正好与 “Weißkopfsee-"),t("em",[e._v("adler")]),e._v("” 相匹配：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "hits": [\n     {\n        "_id": "3",\n        "_score": 3.3191128,\n        "_source": {\n           "text": "Weißkopfseeadler"\n        }\n     }\n  ]\n}\n')])])]),t("p",[e._v("类似查询 “Gesundheit”（健康）可以与 “Welt-gesundheit-sorganisation” 匹配，同时也能与 “Militär-"),t("em",[e._v("ges")]),e._v("-chichte” 和 “Rindfleischetikettierungsüberwachungsaufgabenübertragungs-"),t("em",[e._v("ges")]),e._v("-etz” 匹配，因为它们同时都有 trigram 生成的 "),t("code",[e._v("ges")]),e._v(" ：")]),e._v(" "),t("p",[e._v("使用合适的 "),t("code",[e._v("minimum_should_match")]),e._v(" 可以将这些奇怪的结果排除，只有当 trigram 最少匹配数满足要求时，文档才能被认为是匹配的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('GET /my_index/my_type/_search\n{\n    "query": {\n        "match": {\n            "text": {\n                "query":                "Gesundheit",\n                "minimum_should_match": "80%"\n            }\n        }\n    }\n}\n')])])]),t("p",[e._v("这有点像全文搜索中霰弹枪式的策略，可能会导致倒排索引内容变多，尽管如此，在索引具有很多复合词的语言，或词之间没有空格的语言（如：泰语）时，它仍不失为一种通用且有效的方法。")]),e._v(" "),t("p",[e._v("这种技术可以用来提升 "),t("em",[e._v("召回率")]),e._v(" ——搜索结果中相关的文档数。它通常会与其他技术一起使用，例如 shingles（参见 "),t("a",{attrs:{href:"https://www.elastic.co/guide/cn/elasticsearch/guide/cn/shingles.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("shingles 瓦片词"),t("OutboundLink")],1),e._v(" ），以提高精度和每个文档的相关度评分。")]),e._v(" "),t("h2",{attrs:{id:"_4、聚合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、聚合"}},[e._v("#")]),e._v(" 4、聚合")]),e._v(" "),t("h3",{attrs:{id:"_4-3-条形图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-条形图"}},[e._v("#")]),e._v(" 4.3 条形图")]),e._v(" "),t("p",[e._v('"以最受欢迎 10 种汽车以及它们的平均售价、标准差这些信息创建一个条形图"这个例子的代码执行报错')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    "root_cause": [\n      {\n        "type": "illegal_argument_exception",\n        "reason": "Fielddata is disabled on text fields by default. Set fielddata=true on [make] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead."\n      }\n    ]\n')])])]),t("p",[e._v("报错信息里边已经给出了解决方案，需要把make字段设置为keyword类型。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('PUT /cars/_mapping/transactions\n{\n  "properties": {\n    "price": {\n      "type": "long"\n    },\n    "color":{\n      "type": "keyword"\n    },\n    "make":{\n      "type": "keyword"\n    },\n    "sold":{\n      "type": "date"\n    }\n  }\n}\n')])])]),t("p",[e._v("执行以上语句会报另一个错：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "error": {\n    "root_cause": [\n      {\n        "type": "index_not_found_exception",\n        "reason": "no such index",\n        "index_uuid": "_na_",\n        "resource.type": "index_or_alias",\n        "resource.id": "cars",\n        "index": "cars"\n      }\n    ],\n    "type": "index_not_found_exception",\n    "reason": "no such index",\n    "index_uuid": "_na_",\n    "resource.type": "index_or_alias",\n    "resource.id": "cars",\n    "index": "cars"\n  },\n  "status": 404\n}\n')])])]),t("p",[e._v("google可知，需要先创建一个空的Index")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("PUT cars \n{}\n")])])]),t("p",[e._v("这次就可以愉快的用书中的例子来玩耍了。")]),e._v(" "),t("p",[e._v("其实还有更简单的方式，只需要把书中的make改为make.keyword就可以了")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('GET /cars/transactions/_search\n{\n  "size" : 0,\n  "aggs": {\n    "makes": {\n      "terms": {\n        "field": "make.keyword",\n        "size": 10\n      },\n      "aggs": {\n        "stats": {\n          "extended_stats": {\n            "field": "price"\n          }\n        }\n      }\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_4-6-过滤和聚合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-过滤和聚合"}},[e._v("#")]),e._v(" 4.6 过滤和聚合")]),e._v(" "),t("h4",{attrs:{id:"_4-6-3-后过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-3-后过滤器"}},[e._v("#")]),e._v(" 4.6.3 后过滤器")]),e._v(" "),t("p",[e._v("感觉书上的例子不够清晰，不如这个")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('GET /cars/transactions/_search\n{\n    "size" : 1,\n    "query": {\n        "match": {\n            "make": "ford"\n        }\n    },\n    "post_filter": {    \n        "term" : {\n            "color" : "green"\n        }\n    },\n    "aggs" : {\n        "all_colors": {\n            "terms" : { "field" : "color.keyword" }\n        }\n    }\n}\n')])])]),t("h3",{attrs:{id:"_4-8-近似聚合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-近似聚合"}},[e._v("#")]),e._v(" 4.8 近似聚合")]),e._v(" "),t("h4",{attrs:{id:"_4-8-1-统计去重后的数量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-1-统计去重后的数量"}},[e._v("#")]),e._v(" 4.8.1 统计去重后的数量")]),e._v(" "),t("p",[t("strong",[e._v("速度优化")])]),e._v(" "),t("p",[e._v("这一节提到了通过在索引时就计算hash来提高性能")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('PUT /cars/\n{\n  "mappings": {\n    "transactions": {\n      "properties": {\n        "color": {\n          "type": "keyword",\n          "fields": {\n            "hash": {\n              "type": "murmur3"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n')])])]),t("p",[e._v("但是直接运行，会报错")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("no handler for type [murmur3] declared on field [hash]\n")])])]),t("p",[e._v("原因是没有安装murmur3插件，通过下面这个命令可以查看已安装的插件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("GET /_cat/plugins?v\n")])])]),t("p",[e._v("而这篇官方文档讲了如何安装murmur3插件："),t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/plugins/current/mapper-murmur3.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("murmur3插件"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"_4-10-doc-values-and-fielddata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-10-doc-values-and-fielddata"}},[e._v("#")]),e._v(" 4.10 Doc values and Fielddata")]),e._v(" "),t("h4",{attrs:{id:"_4-10-3-聚合与分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-10-3-聚合与分析"}},[e._v("#")]),e._v(" 4.10.3 聚合与分析")]),e._v(" "),t("p",[e._v("Fielddata在当前版本（es 6.5）默认是禁用的。")])])}),[],!1,null,null,null);a.default=s.exports}}]);
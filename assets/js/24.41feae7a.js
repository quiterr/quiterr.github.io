(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{283:function(t,s,a){t.exports=a.p+"assets/img/pipeline-acceptor.17114e69.png"},309:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"创建连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建连接"}},[t._v("#")]),t._v(" 创建连接")]),t._v(" "),e("p",[t._v("这节不会再像上一篇文章那么细，只记录自己感兴趣的要点。")]),t._v(" "),e("p",[t._v("接收连接是bossGroup干的事情，bossGroup就只有一个NioEventLoop，所以要debug连接创建的过程，只需要到NioEventLoop类去找关键代码下断点即可。\n所以把断点设置在NioEventLoop的run方法中，也就是457行"),e("code",[t._v("strategy = select(curDeadlineNanos);")]),t._v("，启动EchoServer之后就会来到这里，跟进去就会发现关键代码，jdk的select：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" deadlineNanos"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("deadlineNanos "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" NONE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" selector"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Timeout will only be 0 if deadline is within 5 microsecs")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" timeoutMillis "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("deadlineToDelayNanos")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("deadlineNanos "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("995000L")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000L")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" timeoutMillis "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" selector"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("selectNow")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" selector"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timeoutMillis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("这行代码"),e("code",[t._v("return selector.select();")]),t._v("执行之后，开始等待client连接。在把EchoClient运行起来之前，先在NioEventLoop的run方法中把断点设置好，也就是selector获取到连接之后的代码。比如476行"),e("code",[t._v("selectCnt++;")]),t._v("，启动EchoClient之后，程序将走到这里。继续往下会走到493行"),e("code",[t._v("processSelectedKeys();")]),t._v("。再之后650行"),e("code",[t._v("processSelectedKey(k, (AbstractNioChannel) a);")]),t._v("。然后走到了关键的713行判断是否是OP_ACCEPT：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("readyOps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SelectionKey")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OP_READ "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SelectionKey")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OP_ACCEPT"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" readyOps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    unsafe"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("之后走到AbstractNioMessageChannel的75行"),e("code",[t._v("int localRead = doReadMessages(readBuf);")]),t._v("。进去之后是NioServerSocketChannel的151行"),e("code",[t._v("buf.add(new NioSocketChannel(this, ch));")]),t._v("，这是在为新来的连接创建NioSocketChannel并放到read buffer中。")]),t._v(" "),e("p",[t._v("之后在AbstractNioMessageChannel的93行调"),e("code",[t._v("pipeline.fireChannelRead(readBuf.get(i));")]),t._v("，再之后的逻辑就是各种handler来处理了。")]),t._v(" "),e("p",[t._v("这里如果直接往下跟，会有一些不重要的handler逻辑执行，但我们关注的是构建连接，所以可以像下图那样点开pipeline看，然后右键选择jump to type source跳到ServerBootstrapAcceptor的源码，并且显然要关注的是它的channelRead方法，下个断点好了。\n"),e("img",{attrs:{src:a(283),alt:""}})]),t._v(" "),e("p",[t._v("后面的内容和上一节比较像了，这里不再赘述。")])])}),[],!1,null,null,null);s.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{267:function(t,a,s){t.exports=s.p+"assets/img/compositeByteBuf.3ba4625e.png"},268:function(t,a,s){t.exports=s.p+"assets/img/DefaultFileRegion.941684e7.png"},311:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"netty如何使用内存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#netty如何使用内存"}},[t._v("#")]),t._v(" netty如何使用内存")]),t._v(" "),n("p",[t._v("本文知识点：zero-copy，自适应buffer分配，内存池，堆外内存")]),t._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#内存使用技巧"}},[t._v("内存使用技巧")])]),n("li",[n("a",{attrs:{href:"#源码分析"}},[t._v("源码分析")])])])]),n("p"),t._v(" "),n("h2",{attrs:{id:"内存使用技巧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存使用技巧"}},[t._v("#")]),t._v(" 内存使用技巧")]),t._v(" "),n("p",[n("strong",[t._v("目标")])]),t._v(" "),n("ul",[n("li",[t._v("内存占用少（空间）")]),t._v(" "),n("li",[t._v("应用速度快（时间）")]),t._v(" "),n("li",[t._v("减轻Java特有的Full GC STW（Stop the world）")])]),t._v(" "),n("p",[n("strong",[t._v("减少对像本身大小")])]),t._v(" "),n("ul",[n("li",[t._v("能用基本类型就不用包装类型")]),t._v(" "),n("li",[t._v("能定义成类变量的不要定义成实例变量")])]),t._v(" "),n("p",[t._v("例子就是上一篇文章提到的，用volatile long + static AtomicLongFieldUpdater 来替换 AtomicLong。")]),t._v(" "),n("p",[n("strong",[t._v("对分配内存进行预估")])]),t._v(" "),n("p",[t._v("阿里的Java开发手册明确提了在new HashMap的时候必须指定capacity，这其实就是对本原则的使用，可以避免resize带来的各种开销。")]),t._v(" "),n("p",[t._v("Netty 根据接受到的数据动态调整（guess）下个要分配的 Buffer 的大小。可参考io.netty.channel.AdaptiveRecvByteBufAllocator。")]),t._v(" "),n("blockquote",[n("p",[t._v("如果上一次read填满了buffer，AdaptiveRecvByteBufAllocator会逐步提高buffer的大小。如果read操作连续两次都没能填满buffer，它会逐步缩小buffer的大小。")])]),t._v(" "),n("p",[n("strong",[t._v("Zero-Copy")])]),t._v(" "),n("p",[t._v("例 1：使用逻辑组合，代替实际复制。\n例如 CompositeByteBuf：io.netty.handler.codec.ByteToMessageDecoder#COMPOSITE_CUMULATOR\n"),n("img",{attrs:{src:s(267),alt:""}})]),t._v(" "),n("p",[t._v("例 2：使用包装，代替实际复制。\nbyte[] bytes = data.getBytes();\nByteBuf byteBuf = Unpooled.wrappedBuffer(bytes);")]),t._v(" "),n("p",[t._v("例 3：调用 JDK 的 Zero-Copy 接口。\nNetty 也通过在 DefaultFileRegion 中包装了 NIO 的 FileChannel.transferTo() 方法实现了零拷贝：io.netty.channel.DefaultFileRegion#transferTo\n"),n("img",{attrs:{src:s(268),alt:""}})]),t._v(" "),n("p",[n("strong",[t._v("堆外内存")]),t._v("\n优点就是空间更大，缺点是创建的时候要更慢，而且被操作系统监管。下一节再来看代码。")]),t._v(" "),n("p",[n("strong",[t._v("内存池")]),t._v("\n内存池就跟线程池、数据库连接池的概念差不多，如何实现对象池？\n• 开源实现：Apache Commons Pool\n• Netty 轻量级对象池实现 io.netty.util.Recycler（强调场景，并不是哪里都适用）")]),t._v(" "),n("h2",{attrs:{id:"源码分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#源码分析"}},[t._v("#")]),t._v(" 源码分析")]),t._v(" "),n("p",[t._v("从堆外内存切换为堆内内存：")]),t._v(" "),n("ul",[n("li",[t._v("设置参数"),n("code",[t._v("io.netty.noPreferDirect = true;")])]),t._v(" "),n("li",[t._v("设置childOption")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnpooledByteBufAllocator")]),t._v(" unpooledByteBufAllocator "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnpooledByteBufAllocator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nserverBootStrap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("childOption")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ChannelOption")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ALLOCATOR"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unpooledByteBufAllocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("分配堆外内存:"),n("code",[t._v("ByteBuffer.allocateDirect(initialCapacity)")])]),t._v(" "),n("p",[t._v("上面代码设置childOption的时候用的是ChannelOption.ALLOCATOR，如果我们不做设置，就会用DefaultChannelConfig中的配置：")]),t._v(" "),n("p",[n("code",[t._v("private volatile ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;")])]),t._v(" "),n("p",[t._v("最终对应源码在io.netty.buffer.ByteBufUtil，截取一段相关代码：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" allocType "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SystemPropertyUtil")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"io.netty.allocator.type"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PlatformDependent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAndroid")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unpooled"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pooled"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    allocType "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" allocType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Locale")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("US"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBufAllocator")]),t._v(" alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unpooled"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("allocType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        alloc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnpooledByteBufAllocator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DEFAULT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("debug")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-Dio.netty.allocator.type: {}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" allocType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pooled"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("allocType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        alloc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PooledByteBufAllocator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DEFAULT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("debug")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-Dio.netty.allocator.type: {}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" allocType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        alloc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PooledByteBufAllocator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DEFAULT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("debug")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-Dio.netty.allocator.type: pooled (unknown: {})"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" allocType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    DEFAULT_ALLOCATOR "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    THREAD_LOCAL_BUFFER_SIZE "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SystemPropertyUtil")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"io.netty.threadLocalDirectBufferSize"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("debug")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-Dio.netty.threadLocalDirectBufferSize: {}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" THREAD_LOCAL_BUFFER_SIZE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    MAX_CHAR_BUFFER_SIZE "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SystemPropertyUtil")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"io.netty.maxThreadLocalCharBufferSize"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("debug")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-Dio.netty.maxThreadLocalCharBufferSize: {}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" MAX_CHAR_BUFFER_SIZE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("内存池/非内存池的默认选择:")]),t._v(" "),n("ul",[n("li",[t._v("安卓平台 -> 非 pooled 实现")]),t._v(" "),n("li",[t._v("其他 -> pooled 实现。")])]),t._v(" "),n("p",[t._v("内存池/非内存池的切换方式：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("参数设置：io.netty.allocator.type = unpooled;")])]),t._v(" "),n("li",[n("code",[t._v("serverBootStrap.childOption(ChannelOption.ALLOCATOR, UnpooledByteBufAllocator.DEFAULT)")])])]),t._v(" "),n("p",[t._v("最后说一句，不管堆内、堆外，最终还是会由JDK来分配内存。对于堆外，netty最终会调JDK的API。")])])}),[],!1,null,null,null);a.default=e.exports}}]);